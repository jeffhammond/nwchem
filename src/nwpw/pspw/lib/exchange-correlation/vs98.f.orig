
*     ************************************************
*     *                                              *
*     *                   nwpw_GVT4                  *
*     *                                              *
*     ************************************************

      subroutine nwpw_GVT4(alphag,xg,xg2,zg,zg2,gammag,gammag2,
     >                     G,Gdx,Gdz)
      implicit none
      real*8 alphag,xg,xg2,zg,zg2,gammag,gammag2   !*** input  ***
      real*8 G,Gdx,Gdz                                  !*** output ***

********* local declarations******
      real*8 F1,F2,F3,F2x,F2z,F3x,F3z
      real*8 gammagx,gammagz

********* VS98 constants ******

      real*8 aa,bb,cc,dd,ee,ff
      parameter (aa = -9.800683d-1)
      parameter (bb = -3.556788d-3)
      parameter (cc =  6.250326d-3)
      parameter (dd = -2.354518d-5)
      parameter (ee = -1.282732d-4)
      parameter (ff =  3.574822d-4)

      F1  = aa
      F2  = bb*xg2+cc*zg
      F3  = dd*xg2**2.0d0+ee*xg2*zg+ff*zg2
      F2x = 2.0d0*bb*xg
      F2z = cc
      F3x = 4.0d0*dd*xg*xg2+2.0d0*ee*xg*zg
      F3z = ee*xg2+2.0d0*ff*zg
      
      G = (F1 + F2/gammag + F3/gammag2)/gammag

      gammagx = 2.0d0*alphag*xg
      gammagz = alphag

      Gdx = ((-F1*gammagx+F2x)
     &       +(-2.0d0*F2*gammagx+F3x)/gammag
     &       +(-3.0d0*F3*gammagx)/gammag2)/gammag2

      Gdz = ((-F1*gammagz+F2z)
     &       +(-2.0d0*F2*gammagz+F3z)/gammag
     &       +(-3.0d0*F3*gammagz)/gammag2)/gammag2
      return 
      end


*     ************************************************
*     *                                              *
*     *              gen_VS98_restricted             *
*     *                                              *
*     ************************************************

*    This function returns the VS98 exchange-correlation
*  energy density, xce, and its derivatives with respect
*  to n, |grad n|, tau.

*
*   Entry - n2ft3d   : number of grid points
*           rho_in(*) :  density (nup+ndn)
*           agr_in(*): |grad rho_in|
*           tau_in(*): tau
*           x_parameter: scale parameter for exchange
*           c_parameter: scale parameter for correlation
*
*     Exit  - xce(n2ft3d) : VS98 exchange correlation energy density
*             fn(n2ft3d)  : d(n*xce)/dn
*             fdn(n2ft3d) : d(n*xce/d|grad n|
*             fdtau(n2ft3d) : d(n*xce/d|grad n|
*
      subroutine gen_VS98_restricted(n2ft3d,rho_in,agr_in,tau_in,
     >                               x_parameter,c_parameter,
     >                               xce,fn,fdn,fdtau)
      implicit none
      integer n2ft3d
      real*8 rho_in(*),agr_in(*),tau_in(*)     !*** input  ****
      real*8 x_parameter,c_parameter
      real*8 xce(*),fn(*),fdn(*),fdtau(*)      !*** output ****

********* local declarations******
      integer i
      real*8 n,agr,tau
      real*8 n_thrd,n_frthrd,n_fvthrd
      real*8 x,x2,z,z2,gamma,gamma2,xe
      real*8 dxdn,dzdn,dxdagr,dzdtau
      real*8 dGdx,dGdz
      real*8 GG,dGdn,dGdagr,dGdtau 
      real*8 ex,fnx,fdnx,fdtaux
      real*8 ec,fnc,fdnc,fdtauc
      

********* constants ******
      real*8 pi,thrd,frthrd,fvthrd,two_thrd
      parameter (pi=3.14159265358979311599d0)
      parameter (thrd=1.0d0/3.0d0)
      parameter (frthrd=4.0d0/3.0d0)
      parameter (fvthrd=5.0d0/3.0d0)
      parameter (two_thrd=1.25992104989487319066d0)

********* density cutoff parameters******
      real*8 tol,ETA
      parameter (tol = 1.0d-10)
      parameter (ETA            =      1.0d-20)

********* VS98 constants ******
      real*8 cf,alpha
      parameter (cf=5.74246800038d0)         !***cf = 3.0d0/5.0d0*(3.0d0*pi*pi)**(2.0d0/3.0d0))***
      parameter (alpha = 0.00186726d0)


      do i=1,n2ft3d
         n      = rho_in(i) + ETA
         agr    = agr_in(i)
         tau    = tau_in(i)

         !**** VS98 Exchange ****
         if ((n .gt. tol) .and. (tau .gt. tol)) then
         !if (n .gt. tol) then
            n_thrd = n**thrd
            n_frthrd = n_thrd*n
            n_fvthrd = n_thrd*n_frthrd

            x = agr/n_frthrd
            z = tau/n_fvthrd-cf
            x2 = x*x 
            z2 = z*z 

            gamma = 1.0d0 + alpha*(x2+z)
            gamma2 = gamma*gamma

            call nwpw_GVT4(alpha,x,x2,z,z2,gamma,gamma2,GG,dGdx,dGdz)

            !f = n_frthrd*GG
            ex = n_thrd*GG

            dxdn = -frthrd*x/n
            dzdn = -fvthrd*tau/(n_fvthrd*n)
            dGdn = dGdx*dxdn + dGdz*dzdn
            fnx = frthrd*n_thrd*GG+n_frthrd*dGdn 

            dxdagr = 1.0d0/n_frthrd
            dGdagr = dGdx*dxdagr
            fdnx = n_frthrd*dGdagr

            dzdtau = 1.0d0/n_fvthrd
            dGdtau = dGdz*dzdtau
            fdtaux = n_frthrd*dGdtau
         else
            ex = 0.0d0
            fnx = 0.0d0
            fdnx = 0.0d0
            fdtaux = 0.0d0
         end if

         !**** VS98 Correlation ****
         ec     = 0.0d0
         fnc    = 0.0d0
         fdnc   = 0.0d0
         fdtauc = 0.0d0

         xce(i)   = x_parameter*ex     + c_parameter*ec
         fn(i)    = x_parameter*fnx    + c_parameter*fnc
         fdn(i)   = x_parameter*fdnx   + c_parameter*fdnc
         fdtau(i) = x_parameter*fdtaux + c_parameter*fdtauc
      end do
 
      return 
      end



     
c      subroutine vs98c(rhou_in,rhod_in,agru_in,agrd_in,tauu_in,taud_in,
c     &                 f,fdnu,fdnd,fdagru,fdagrd,fdtauu,fdtaud)
c      implicit none
c      
c      real*8 rhou_in,rhod_in,agru_in,agrd_in,tauu_in,taud_in          !*** input  ***
c      real*8 f,fdnu,fdnd,fdagru,fdagrd,fdtauu,fdtaud                  !*** output ***
c
c      real*8 nu,nd,agru,agrd,tauu,taud
c      real*8 nu_thrd,nu_frthrd,nu_fvthrd,nd_thrd,nd_frthrd,nd_fvthrd
c      real*8 xu,xu2,zu,zu2,gammau,gammau2,zucf,Du
c      real*8 xd,xd2,zd,zd2,gammad,gammad2,zdcf,Dd
c      real*8 x,x2,z,z2,gamma,gamma2
c      real*8 dxudnu,dzudnu,dxudagru,dzudtauu,dDudxu,dDudzu,   
c     &       dxddnd,dzddnd,dxddagrd,dzddtaud,dDddxd,dDddzd,
c     &       dxdnu,dzdnu,dxdagru,dzdtauu,
c     &       dxdnd,dzdnd,dxdagrd,dzdtaud   
c      real*8 Gu,GDux,GDuz,dGudxu,dGudzu,
c     &       Gd,GDdx,GDdz,dGddxd,dGddzd,
c     &       Gud,dGuddx,dGuddz
c      real*8 ec0u,dec0udnu,ec0d,dec0ddnd,ec0ud,dec0uddnu,dec0uddnd 
c      real*8 fu,fd,fud,fudnu,fudagru,fudtauu,fddnd,
c     &       fddagrd,fddtaud,fuddnu,fuddagru,fuddtauu,
c     &       fuddnd,fuddagrd,fuddtaud 
c      
c********* constants ******
c      real*8 pi,thrd,frthrd,fvthrd,two_thrd
c      parameter (pi=3.14159265358979311599d0)
c      parameter (thrd=1.0d0/3.0d0)
c      parameter (frthrd=4.0d0/3.0d0)
c      parameter (fvthrd=5.0d0/3.0d0)
c      parameter (two_thrd=1.25992104989487319066d0)
c********* density cutoff parameters******
c      real*8 tol,ETA
c      parameter (tol = 1.0d-10)
c      parameter (ETA            =      1.0d-20)
c
c********* VS98 constants ******
c      real*8 cf,alpha
c      parameter (cf=5.74246800038d0)         !***cf = 3.0d0/5.0d0*(3.0d0*pi*pi)**(2.0d0/3.0d0))***
c      parameter (alpha = 0.00186726d0)
c
c      !n      = rho_in + ETA
c      nu     = rhou_in + ETA/2.0d0
c      nd     = rhod_in + ETA/2.0d0
c      !agr    = agr_in
c      agru   = agru_in
c      agrd   = agrd_in
c      !tau    = tau_in
c      tauu   = tauu_in
c      taud   = taud_in
c
c      !n_thrd    = n**thrd
c      !n_frthrd  = n_thrd*n
c      !n_fvthrd  = n_thrd*n_frthrd
c      nu_thrd   = nu**thrd
c      nu_frthrd = nu_thrd*nu
c      nu_fvthrd = nu_thrd*nu_frthrd
c      nd_thrd   = nd**thrd
c      nd_frthrd = nd_thrd*nd
c      nd_fvthrd = nd_thrd*nd_frthrd
c
c      !x       = agr/n_frthrd
c      !z       = tau/n_fvthrd-cf 
c      !gamma   = 1.0d0 + alpha*(x**2.0d0+z)
c      !gamma2  = gamma*gamma
c      xu      = agru/nu_frthrd
c      xu2     = xu*xu
c      zu      = tauu/nu_fvthrd-cf
c      zu2     = zu*zu 
c      gammau  = 1.0d0 + alpha*(xu2+zu)
c      gammau2 = gammau*gammau
c      zucf    = 4.0d0*(zu+cf)
c      Du      = 1.0d0 - xu2/zucf 
c      xd      = agrd/nd_frthrd
c      xd2     = xd*xd
c      zd      = taud/nd_fvthrd-cf
c      zd2     = zd*zd 
c      zdcf    = 4.0d0*(zd+cf)
c      Dd      = 1.0d0 - xd2/zdcf 
c      gammad  = 1.0d0 + alpha*(xd2+zd)
c      gammad2 = gammad*gammad
c      x2      = xu*xu+xd*xd
c      x       = dsqrt(x2)
c      z       = zu+zd
c      z2      = z*z
c      gamma   = 1.0d0 + alpha*(x2+z)
c      gamma2  = gamma*gamma
c
c      dxudnu   = -frthrd*xu/nu
c      dzudnu   = -fvthrd*tauu/(nu_fvthrd*nu)
c      dxudagru = 1.0d0/nu_frthrd
c      dzudtauu = 1.0d0/nu_fvthrd
c      dDudxu   = -2.0d0*xu/zucf
c      dDudzu   = xu2/zucf/(zu+cf)
c      dxddnd   = -frthrd*xd/nd
c      dzddnd   = -fvthrd*taud/(nd_fvthrd*nd)
c      dxddagrd = 1.0d0/nd_frthrd
c      dzddtaud = 1.0d0/nd_fvthrd
c      dDddxd   = -2.0d0*xd/zdcf
c      dDddzd   = xd2/zdcf/(zd+cf)
c      dxdnu    = xu*dxudnu/x
c      dzdnu    = dzudnu
c      dxdagru  = xu*dxudagru/x
c      dzdtauu   = dzudtauu
c      dxdnd    = xd*dxddnd/x
c      dzdnd    = dzddnd
c      dxdagrd  = xd*dxddagrd/x
c      dzdtaud   = dzddtaud
c    
c      call nwpw_GVT4(alpha,xu,xu2,zu,zu2,gammau,gammau2,Gu,dGudxu,dGudzu)
c
c      fu       = ec0u*Du*Gu
c
c      GDux     = dGudxu*Du + Gu*dDudxu
c      GDuz     = dGudzu*Du + Gu*dDudzu
c
c      fudnu    = (GDux*dxudnu + GDuz*dzudnu)*ec0u + Gu*Du*dec0udnu
c      fudagru  = GDux*dxudagru*ec0u
c      fudtauu  = GDuz*dzudtauu*ec0u
c
c      call nwpw_GVT4(alpha,xd,xd2,zd,zd2,gammad,gammad2,Gd,dGddxd,dGddzd)
c
c      fd      = ec0d*Dd*Gd
c
c      GDdx     = dGddxd*Dd + Gd*dDddxd
c      GDdz     = dGddzd*Dd + Gd*dDddzd
c
c      fddnd   = (GDdx*dxddnd + GDdz*dzddnd)*ec0d + Gd*Dd*dec0ddnd
c      fddagrd = GDdx*dxddagrd*ec0d
c      fddtaud = GDdz*dzddtaud*ec0d
c
c      call nwpw_GVT4(alpha,x,x2,z,x2,gamma,gamma2,Gud,dGuddx,dGuddz)
c
c      fud       = ec0ud*Gud
c      
c      fuddnu    = dec0uddnu*Gud + ec0ud*(dGuddx*dxdnu+dGuddz*dzdnu)
c      fuddnd    = dec0uddnd*Gud + ec0ud*(dGuddx*dxdnd+dGuddz*dzdnd)
c
c      fuddagru  = dGuddx*dxdagru*ec0ud
c      fuddagrd  = dGuddx*dxdagrd*ec0ud
c
c      fuddtauu  = dGuddz*dzdtauu*ec0ud
c      fuddtaud  = dGuddz*dzdtaud*ec0ud
c
c      f = fu + fd + fud
c 
c      fdnu   = fudnu + fuddnu
c      fdnd   = fddnd + fuddnd
c      fdagru = fudagru + fuddagru
c      fdagrd = fddagrd + fuddagrd
c      fdtauu = fudtauu + fuddtauu
c      fdtaud = fddtaud + fuddtaud
c
c      return       
c      end

c      program testing
c      implicit none
c      integer i
c      real*8  n,dn,agr,tau,xe,f,dfdn,dfdagr,dfdtau
c
c      dn = 0.001
c      agr = 0.015d0
c      tau = 0.01d0
c      do i=0,100
c         n = i*dn
c         call vs98x(n,agr,tau,f,dfdn,dfdagr,dfdtau)
c         write(*,*) n,f,dfdn,dfdagr,dfdtau
c      end do
c
c      stop
c      end

