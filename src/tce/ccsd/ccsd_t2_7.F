      SUBROUTINE ccsd_t2_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 4 ) * Sum ( h6 p5 ) * t ( p3 p5 h1 h6 )_t * i1 ( h6 p4 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      integer, intent(in) :: d_a,d_b,d_c
      integer, intent(in) :: k_a_offset,k_b_offset,k_c_offset
      integer :: next,nprocs,count
      integer :: p5b,h6b,p3b,p4b,h1b,h2b
      integer :: p5b_1,h6b_1,h1b_1,h2b_2
      integer :: p3b_1,p4b_2,p5b_2,h6b_2
      integer :: dima,dimb,dimc,dim_common,dima_sort,dimb_sort
      INTEGER l_cs
      INTEGER k_cs
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)

      print*,'CCSD_T2_7_ORIGINAL'

      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = 1,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
              dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h2b-1)
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) ! pphh 
     &             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs))
     &          CALL ERRQUIT('ccsd_t2_7',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO p5b = noab+1,noab+nvab
               DO h6b = 1,noab
                IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. 
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h6b-1)) THEN
                 IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h6b-1)))) 
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h6b,
     &                                  p3b_1,p5b_1,h1b_1,h6b_1)
                  CALL TCE_RESTRICTED_4(p4b,h6b,h2b,p5b,
     &                                  p4b_2,h6b_2,h2b_2,p5b_2)
                  dim_common = int_mb(k_range+p5b-1)
     &                       * int_mb(k_range+h6b-1)
                  dima = dim_common * dima_sort
                  dimb = dim_common * dimb_sort
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                   IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as))
     &              CALL ERRQUIT('ccsd_t2_7',1,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a))
     &              CALL ERRQUIT('ccsd_t2_7',2,MA_ERR)
                   IF ((p5b .lt. p3b) .and. (h6b .lt. h1b)) THEN
                    CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),
     &                   dima,int_mb(k_a_offset),
     &                   (h1b_1-1+noab*(h6b_1-1+noab*(p3b_1-noab-1+nvab*
     &                   (p5b_1-noab-1)))))
                    CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),
     &                   4,2,3,1,1.0d0)
                   END IF
                   IF ((p5b .lt. p3b) .and. (h1b .le. h6b)) THEN
                    CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),
     &                   dima,int_mb(k_a_offset),
     &                   (h6b_1-1+noab*(h1b_1-1+noab*(p3b_1-noab-1+nvab*
     &                   (p5b_1-noab-1)))))
                    CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),
     &                   3,2,4,1,-1.0d0)
                   END IF
                   IF ((p3b .le. p5b) .and. (h6b .lt. h1b)) THEN
                      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),
     &                     dima,int_mb(k_a_offset),
     &                     (h1b_1-1+noab*(h6b_1-1+noab*
     &                     (p5b_1-noab-1+nvab*(p3b_1-noab-1)))))
                      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                     int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     &                     int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),
     &                     4,1,3,2,-1.0d0)
                   END IF
                   IF ((p3b .le. p5b) .and. (h1b .le. h6b)) THEN
                      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),
     &                     dima,
     &                     int_mb(k_a_offset),(h6b_1-1+noab*
     &                     (h1b_1-1+noab*(p5b_1-noab-1+nvab*
     &                     (p3b_1-noab-1)))))
                      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                     int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     &                     int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),
     &                     3,1,4,2,1.0d0)
                   END IF
                   IF (.not.MA_POP_STACK(l_a))
     &              CALL ERRQUIT('ccsd_t2_7',3,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs))
     &              CALL ERRQUIT('ccsd_t2_7',4,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b))
     &              CALL ERRQUIT('ccsd_t2_7',5,MA_ERR)
                   CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),
     &                  dimb,
     &                  int_mb(k_b_offset),(h6b_2-1+noab*
     &                  (p5b_2-noab-1+nvab*(h2b_2-1+noab*
     &                  (p4b_2-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                  int_mb(k_range+p4b-1),int_mb(k_range+h6b-1),
     &                  int_mb(k_range+h2b-1),int_mb(k_range+p5b-1),
     &                  3,1,2,4,1.0d0)
                   IF (.not.MA_POP_STACK(l_b))
     &              CALL ERRQUIT('ccsd_t2_7',6,MA_ERR)
                   CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                        1.0d0,dbl_mb(k_as),dim_common,
     &                        dbl_mb(k_bs),dim_common,
     &                        1.0d0,dbl_mb(k_cs),dima_sort)
                   IF (.not.MA_POP_STACK(l_bs))
     &              CALL ERRQUIT('ccsd_t2_7',7,MA_ERR)
                   IF (.not.MA_POP_STACK(l_as))
     &              CALL ERRQUIT('ccsd_t2_7',8,MA_ERR)
                  END IF
                 END IF
                END IF
               END DO
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c))
     &          CALL ERRQUIT('ccsd_t2_7',9,MA_ERR)
              IF ((p3b .le. p4b) .and. (h1b .le. h2b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              4,2,3,1,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),
     &              dimc,int_mb(k_c_offset),
     &              (h2b-1+noab*(h1b-1+noab*(p4b-noab-1+nvab*
     &              (p3b-noab-1)))))
              END IF
              IF ((p3b .le. p4b) .and. (h2b .le. h1b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              4,2,1,3,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),
     &              dimc,int_mb(k_c_offset),
     &              (h1b-1+noab*(h2b-1+noab*(p4b-noab-1+nvab*
     &              (p3b-noab-1)))))
              END IF
              IF ((p4b .le. p3b) .and. (h1b .le. h2b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              2,4,3,1,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),
     &              dimc,int_mb(k_c_offset),
     &              (h2b-1+noab*(h1b-1+noab*(p3b-noab-1+nvab*
     &              (p4b-noab-1)))))
              END IF
              IF ((p4b .le. p3b) .and. (h2b .le. h1b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              2,4,1,3,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),
     &              dimc,int_mb(k_c_offset),
     &              (h1b-1+noab*(h2b-1+noab*(p3b-noab-1+nvab*
     &              (p4b-noab-1)))))
              END IF
              IF (.not.MA_POP_STACK(l_c)) 
     &          CALL ERRQUIT('ccsd_t2_7',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs))
     &          CALL ERRQUIT('ccsd_t2_7',11,MA_ERR)
              next = NXTASK(nprocs, 1)
             END IF
             count = count + 1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END



      SUBROUTINE ccsd_t2_7_stdpar(d_a,k_a_offset,
     &                            d_b,k_b_offset,
     &                            d_c,k_c_offset,
     &                            maxh,maxp)
!     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
!     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
!     i0 ( p3 p4 h1 h2 )_vt+= -1*P( 4 )*Sum ( h6 p5 )*t ( p3 p5 h1 h6 )_t*i1 ( h6 p4 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      integer, intent(in) :: d_a,d_b,d_c
      integer, intent(in) :: k_a_offset,k_b_offset,k_c_offset
      integer, intent(in) :: maxh,maxp
      integer :: dimhhpp
      integer :: next,nprocs,count
      integer :: p5b,h6b,p3b,p4b,h1b,h2b
      integer :: p5b_1,h6b_1,h1b_1,h2b_2
      integer :: p3b_1,p4b_2,p5b_2,h6b_2
      integer :: dima,dimb,dimc,dim_common,dima_sort,dimb_sort
      double precision, allocatable :: f_a(:)
      double precision, allocatable :: f_b(:)
      double precision, allocatable :: f_c(:)
      double precision, allocatable :: f_t(:)
      integer :: e_a,e_b,e_c,e_t
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)

      print*,'CCSD_T2_7_STDPAR'

      dimhhpp = maxh*maxh*maxp*maxp

      allocate(f_a(1:dimhhpp),stat=e_a)
      allocate(f_b(1:dimhhpp),stat=e_b)
      allocate(f_c(1:dimhhpp),stat=e_c)
      allocate(f_t(1:dimhhpp),stat=e_t)
      if (e_a.ne.0) call errquit("alloc a",dimhhpp,MA_ERR)
      if (e_b.ne.0) call errquit("alloc b",dimhhpp,MA_ERR)
      if (e_c.ne.0) call errquit("alloc c",dimhhpp,MA_ERR)
      if (e_t.ne.0) call errquit("alloc t",dimhhpp,MA_ERR)

      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = 1,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) 
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
              dimb_sort = int_mb(k_range+p4b-1) * int_mb(k_range+h2b-1)
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) ! pphh 
     &             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL DFILL(dimc,0.0d0,f_c,1)
              DO p5b = noab+1,noab+nvab
               DO h6b = 1,noab
                IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. 
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h6b-1)) THEN
                 IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h6b-1)))) 
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h6b,
     &                                  p3b_1,p5b_1,h1b_1,h6b_1)
                  CALL TCE_RESTRICTED_4(p4b,h6b,h2b,p5b,
     &                                  p4b_2,h6b_2,h2b_2,p5b_2)
                  dim_common = int_mb(k_range+p5b-1)
     &                       * int_mb(k_range+h6b-1)
                  dima = dim_common * dima_sort
                  dimb = dim_common * dimb_sort
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                   IF ((p5b .lt. p3b) .and. (h6b .lt. h1b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,
     &                   dima,int_mb(k_a_offset),
     &                   (h1b_1-1+noab*(h6b_1-1+noab*(p3b_1-noab-1+nvab*
     &                   (p5b_1-noab-1)))))
                    CALL TCE_SORT_4(f_t,f_a,
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),
     &                   4,2,3,1,1.0d0)
                   END IF
                   IF ((p5b .lt. p3b) .and. (h1b .le. h6b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,
     &                   dima,int_mb(k_a_offset),
     &                   (h6b_1-1+noab*(h1b_1-1+noab*(p3b_1-noab-1+nvab*
     &                   (p5b_1-noab-1)))))
                    CALL TCE_SORT_4(f_t,f_a,
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),
     &                   3,2,4,1,-1.0d0)
                   END IF
                   IF ((p3b .le. p5b) .and. (h6b .lt. h1b)) THEN
                      CALL GET_HASH_BLOCK(d_a,f_t,
     &                     dima,int_mb(k_a_offset),
     &                     (h1b_1-1+noab*(h6b_1-1+noab*
     &                     (p5b_1-noab-1+nvab*(p3b_1-noab-1)))))
                      CALL TCE_SORT_4(f_t,f_a,
     &                     int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     &                     int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),
     &                     4,1,3,2,-1.0d0)
                   END IF
                   IF ((p3b .le. p5b) .and. (h1b .le. h6b)) THEN
                      CALL GET_HASH_BLOCK(d_a,f_t,
     &                     dima,int_mb(k_a_offset),(h6b_1-1+noab*
     &                     (h1b_1-1+noab*(p5b_1-noab-1+nvab*
     &                     (p3b_1-noab-1)))))
                      CALL TCE_SORT_4(f_t,f_a,
     &                     int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     &                     int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),
     &                     3,1,4,2,1.0d0)
                   END IF
                   CALL GET_HASH_BLOCK(d_b,f_t,
     &                  dimb,
     &                  int_mb(k_b_offset),(h6b_2-1+noab*
     &                  (p5b_2-noab-1+nvab*(h2b_2-1+noab*
     &                  (p4b_2-noab-1)))))
                   CALL TCE_SORT_4(f_t,f_b,
     &                  int_mb(k_range+p4b-1),int_mb(k_range+h6b-1),
     &                  int_mb(k_range+h2b-1),int_mb(k_range+p5b-1),
     &                  3,1,2,4,1.0d0)
                   CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                        1.0d0,f_a,dim_common,
     &                        f_b,dim_common,
     &                        1.0d0,f_c,dima_sort)
                  END IF
                 END IF
                END IF
               END DO
              END DO
              IF ((p3b .le. p4b) .and. (h1b .le. h2b)) THEN
               CALL TCE_SORT_4(f_c,f_t,
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              4,2,3,1,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,f_t,
     &              dimc,int_mb(k_c_offset),
     &              (h2b-1+noab*(h1b-1+noab*(p4b-noab-1+nvab*
     &              (p3b-noab-1)))))
              END IF
              IF ((p3b .le. p4b) .and. (h2b .le. h1b)) THEN
               CALL TCE_SORT_4(f_c,f_t,
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              4,2,1,3,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,f_t,
     &              dimc,int_mb(k_c_offset),
     &              (h1b-1+noab*(h2b-1+noab*(p4b-noab-1+nvab*
     &              (p3b-noab-1)))))
              END IF
              IF ((p4b .le. p3b) .and. (h1b .le. h2b)) THEN
               CALL TCE_SORT_4(f_c,f_t,
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              2,4,3,1,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,f_t,
     &              dimc,int_mb(k_c_offset),
     &              (h2b-1+noab*(h1b-1+noab*(p3b-noab-1+nvab*
     &              (p4b-noab-1)))))
              END IF
              IF ((p4b .le. p3b) .and. (h2b .le. h1b)) THEN
               CALL TCE_SORT_4(f_c,f_t,
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              2,4,1,3,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,f_t,
     &              dimc,int_mb(k_c_offset),
     &              (h1b-1+noab*(h2b-1+noab*(p3b-noab-1+nvab*
     &              (p4b-noab-1)))))
              END IF
              next = NXTASK(nprocs, 1)
             END IF
             count = count + 1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()

      deallocate(f_a,stat=e_a)
      deallocate(f_b,stat=e_b)
      deallocate(f_c,stat=e_c)
      deallocate(f_t,stat=e_t)
      if (e_a.ne.0) call errquit("dealloc a",0,MA_ERR)
      if (e_b.ne.0) call errquit("dealloc b",0,MA_ERR)
      if (e_c.ne.0) call errquit("dealloc c",0,MA_ERR)
      if (e_t.ne.0) call errquit("dealloc t",0,MA_ERR)

      RETURN
      END
