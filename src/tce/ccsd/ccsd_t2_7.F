      SUBROUTINE ccsd_t2_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt+= -1*P( 4 )*Sum ( h6 p5 )*t ( p3 p5 h1 h6 )_t*i1 ( h6 p4 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      integer :: d_a, d_b, d_c
      integer :: k_a_offset, k_b_offset, k_c_offset
      integer :: p3b, p4b, h1b, h2b, p5b, h6b
      integer :: p3b_1, p5b_1, h1b_1, h6b_1, p4b_2, h6b_2, h2b_2, p5b_2
      integer :: dima, dimb, dimc, dima_sort, dimb_sort, dim_common
      integer :: k_a, l_a, k_b, l_b, k_c, l_c
      integer :: k_as, l_as, k_bs, l_bs, l_cs, k_cs
      integer :: next, nprocs, count, NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = 1,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
               dimc = int_mb(k_range+p3b-1)*int_mb(k_range+p4b-1)
     &              * int_mb(k_range+h1b-1)*int_mb(k_range+h2b-1)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     &           CALL ERRQUIT('ccsd_t2_7',0,MA_ERR)
               CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
               DO p5b = noab+1,noab+nvab
                DO h6b = 1,noab
                 IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. 
     &               int_mb(k_spin+h1b-1)+int_mb(k_spin+h6b-1)) THEN
                  IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),
     &                ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h6b-1))))
     &                       .eq. irrep_t) THEN
                   CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h6b,
     &                                   p3b_1,p5b_1,h1b_1,h6b_1)
                   CALL TCE_RESTRICTED_4(p4b,h6b,h2b,p5b,
     &                                   p4b_2,h6b_2,h2b_2,p5b_2)
                   dim_common = int_mb(k_range+p5b-1)
     &                        * int_mb(k_range+h6b-1)
                   dima_sort = int_mb(k_range+p3b-1)
     &                       * int_mb(k_range+h1b-1)
                   dimb_sort = int_mb(k_range+p4b-1)
     &                       * int_mb(k_range+h2b-1)
                   dima = dim_common*dima_sort
                   dimb = dim_common*dimb_sort
                   IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                    IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     &                  CALL ERRQUIT('ccsd_t2_7',1,MA_ERR)
                    IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     &                  CALL ERRQUIT('ccsd_t2_7',2,MA_ERR)
                    IF ((p5b .lt. p3b) .and. (h6b .lt. h1b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                  int_mb(k_a_offset),(h1b_1-1+noab*(h6b_1-1+noab*
     &                  (p3b_1-noab-1+nvab*(p5b_1-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     &                  int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),
     &                  4,2,3,1,1.0d0)
                   END IF
                   IF ((p5b .lt. p3b) .and. (h1b .le. h6b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                  int_mb(k_a_offset),(h6b_1-1+noab*(h1b_1-1+noab*
     &                  (p3b_1-noab-1+nvab*(p5b_1-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     &                  int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),
     &                  3,2,4,1,-1.0d0)
                   END IF
                   IF ((p3b .le. p5b) .and. (h6b .lt. h1b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                  int_mb(k_a_offset),(h1b_1-1+noab*(h6b_1-1+noab*
     &                  (p5b_1-noab-1+nvab*(p3b_1-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                  int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     &                  int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),
     &                  4,1,3,2,-1.0d0)
                   END IF
                   IF ((p3b .le. p5b) .and. (h1b .le. h6b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                  int_mb(k_a_offset),(h6b_1-1+noab*(h1b_1-1+noab*
     &                  (p5b_1-noab-1+nvab*(p3b_1-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                  int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     &                  int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),
     &                  3,1,4,2,1.0d0)
                   END IF
                   IF (.not.MA_POP_STACK(l_a)) 
     &              CALL ERRQUIT('ccsd_t2_7',3,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     &              CALL ERRQUIT('ccsd_t2_7',4,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     &              CALL ERRQUIT('ccsd_t2_7',5,MA_ERR)
                   CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                  int_mb(k_b_offset),(h6b_2-1+noab*(p5b_2-noab-1+
     &                  nvab*(h2b_2-1+noab*(p4b_2-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                  int_mb(k_range+p4b-1),int_mb(k_range+h6b-1),
     &                  int_mb(k_range+h2b-1),int_mb(k_range+p5b-1),
     &                  3,1,2,4,1.0d0)
                   IF (.not.MA_POP_STACK(l_b)) 
     &              CALL ERRQUIT('ccsd_t2_7',6,MA_ERR)
                   CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                  1.0d0,dbl_mb(k_as),dim_common,
     &                        dbl_mb(k_bs),dim_common,
     &                  1.0d0,dbl_mb(k_cs),dima_sort)
                   IF (.not.MA_POP_STACK(l_bs)) 
     &              CALL ERRQUIT('ccsd_t2_7',7,MA_ERR)
                   IF (.not.MA_POP_STACK(l_as)) 
     &              CALL ERRQUIT('ccsd_t2_7',8,MA_ERR)
                  END IF
                 END IF
                END IF
               END DO
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     &              CALL ERRQUIT('ccsd_t2_7',9,MA_ERR)
              IF ((p3b .le. p4b) .and. (h1b .le. h2b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              4,2,3,1,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     &              int_mb(k_c_offset),(h2b-1+noab*(h1b-1+noab*
     &              (p4b-noab-1+nvab*(p3b-noab-1)))))
              END IF
              IF ((p3b .le. p4b) .and. (h2b .le. h1b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              4,2,1,3,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     &              int_mb(k_c_offset),(h1b-1+noab*(h2b-1+noab*
     &              (p4b-noab-1+nvab*(p3b-noab-1)))))
              END IF
              IF ((p4b .le. p3b) .and. (h1b .le. h2b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              2,4,3,1,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     &              int_mb(k_c_offset),(h2b-1+noab*(h1b-1+noab*
     &              (p3b-noab-1+nvab*(p4b-noab-1)))))
              END IF
              IF ((p4b .le. p3b) .and. (h2b .le. h1b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              2,4,1,3,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     &              int_mb(k_c_offset),(h1b-1+noab*(h2b-1+noab*
     &              (p3b-noab-1+nvab*(p4b-noab-1)))))
              END IF
              IF (.not.MA_POP_STACK(l_c)) 
     &              CALL ERRQUIT('ccsd_t2_7',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     &              CALL ERRQUIT('ccsd_t2_7',11,MA_ERR)
              next = NXTASK(nprocs, 1)
             END IF
             count = count+1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      END

      SUBROUTINE ccsd_t2_7_1(d_a,k_a_offset,d_c,k_c_offset)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_v+= 1*v ( h6 p3 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a,d_c
      INTEGER k_a_offset,k_c_offset
      INTEGER NXTASK,next,nprocs,count
      INTEGER p3b,h6b,h1b,p5b,p3b_1,h6b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_as,l_as,k_a,l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h1b = 1,noab
        DO p5b = noab+1,noab+nvab
         DO h6b = 1,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p5b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. 
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1)*int_mb(k_range+h6b-1) 
     1            *int_mb(k_range+h1b-1)*int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(p3b,h6b,h1b,p5b,
     1                              p3b_1,h6b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as)) 
     1              CALL ERRQUIT('ccsd_t2_7_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_7_1',1,MA_ERR)
               IF ((h6b .le. p3b) .and. (h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1-1+(noab+nvab)*
     2                (h1b_1-1+(noab+nvab)*(p3b_1-1+
     3                (noab+nvab)*(h6b_1-1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1-1+(noab+nvab)*
     2                (h1b_1-1+(noab+nvab)*(p3b_1-1+
     3                (noab+nvab)*(h6b_1-1)))),
     4                p5b_1,h1b_1,p3b_1,h6b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),
     3               2,1,3,4,1.0d0)
               END IF
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_7_1',2,MA_ERR)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_as),dimc,
     1              int_mb(k_c_offset),(h6b-1+noab*
     2              (p5b-noab-1+nvab*(h1b-1+noab*
     3              (p3b-noab-1)))))
               IF (.not.MA_POP_STACK(l_as)) 
     1              CALL ERRQUIT('ccsd_t2_7_1',5,MA_ERR)
              END IF
          next = NXTASK(nprocs, 1)
          END IF
          count = count+1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      END





      SUBROUTINE ccsd_t2_7_2(d_a,k_a_offset,d_b,k_b_offset,
     &                       d_c,k_c_offset)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_vt+= -1*Sum ( p7 )*t ( p7 h1 )_t*v ( h6 p3 p5 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      integer :: d_a, d_b, d_c
      integer :: k_a_offset, k_b_offset, k_c_offset
      integer :: p3b, h6b, h1b, p5b, p7b
      integer :: p7b_1, h1b_1, p3b_2, h6b_2, p5b_2, p7b_2, p7b_in
      integer :: dima, dimb, dimc, dim_common, dima_sort, dimb_sort
      integer :: k_a, l_a, k_b, l_b, k_c, l_c
      integer :: k_as, l_as, k_bs, l_bs, k_cs, l_cs
      integer :: next, nprocs, count
      integer :: NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h1b = 1,noab
        DO p5b = noab+1,noab+nvab
         DO h6b = 1,noab
          IF ((.not.restricted).or.
     &          ( int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1)
     &           +int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1)
     &             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     &         CALL ERRQUIT('ccsd_t2_7_2',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              do p7b_in=ga_nodeid()+1,ga_nodeid()+nvab
               p7b=mod(p7b_in,nvab)+noab+1
               IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
                IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) 
     &                     .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_2(p7b,h1b,
     &                                 p7b_1,h1b_1)
                 CALL TCE_RESTRICTED_4(p3b,h6b,p5b,p7b,
     &                                 p3b_2,h6b_2,p5b_2,p7b_2)
                 dim_common = int_mb(k_range+p7b-1)
                 dima_sort = int_mb(k_range+h1b-1)
                 dimb_sort = int_mb(k_range+p3b-1)
     &                     * int_mb(k_range+h6b-1)
     &                     * int_mb(k_range+p5b-1)
                 dima = dim_common*dima_sort
                 dimb = dim_common*dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',1,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',2,MA_ERR)
                  CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     &                 int_mb(k_a_offset),(h1b_1-1+noab*(p7b_1-noab-1)))
                  CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),
     &                 int_mb(k_range+p7b-1),int_mb(k_range+h1b-1),
     &                 2,1,1.0d0)
                  IF (.not.MA_POP_STACK(l_a)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',3,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',4,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',5,MA_ERR)
                  IF ((h6b .le. p3b) .and. (p7b .lt. p5b)) THEN
                   if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                   else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p5b_2,p7b_2,p3b_2,h6b_2)
                   end if
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                  int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),
     &                  int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
     &                  4,1,2,3,-1.0d0)
                  END IF
                  IF ((h6b .le. p3b) .and. (p5b .le. p7b)) THEN
                   if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                   else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p7b_2,p5b_2,p3b_2,h6b_2)
                   end if
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                  int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
     &                  3,1,2,4,1.0d0)
                  END IF
                  IF (.not.MA_POP_STACK(l_b)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',6,MA_ERR)
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                 1.0d0,dbl_mb(k_as),dim_common,
     &                       dbl_mb(k_bs),dim_common,
     &                 1.0d0,dbl_mb(k_cs),dima_sort)
                  IF (.not.MA_POP_STACK(l_bs)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',7,MA_ERR)
                  IF (.not.MA_POP_STACK(l_as)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',8,MA_ERR)
                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     &          CALL ERRQUIT('ccsd_t2_7_2',9,MA_ERR)
              CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &             int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),
     &             int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),
     &             3,2,4,1,-1.0d0)
              CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     &             int_mb(k_c_offset),(h6b-1+noab*(p5b-noab-1+nvab*
     &             (h1b-1+noab*(p3b-noab-1)))))
              IF (.not.MA_POP_STACK(l_c)) 
     &           CALL ERRQUIT('ccsd_t2_7_2',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     &          CALL ERRQUIT('ccsd_t2_7_2',11,MA_ERR)
              next = NXTASK(nprocs, 1)
             END IF
             count = count+1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      END



      SUBROUTINE ccsd_t2_7_3(d_a,k_a_offset,d_b,k_b_offset,
     &                       d_c,k_c_offset)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_vt+=-1/2*Sum ( h8 p7 )*t ( p3 p7 h1 h8 )_t*v ( h6 h8 p5 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER :: d_a, d_b, d_c
      INTEGER :: k_a_offset, k_b_offset, k_c_offset
      INTEGER :: p3b, h6b, h1b, p5b, p7b, h8b
      INTEGER :: p3b_1, p7b_1, h1b_1, h8b_1, h6b_2, h8b_2, p5b_2, p7b_2
      integer :: p7b_in,h8b_in
      integer :: dima, dimb, dimc, dima_sort, dimb_sort, dim_common
      INTEGER :: k_cs, l_cs, k_as, l_as, k_bs, l_bs
      INTEGER :: k_a, l_a, k_b, l_b, k_c, l_c
      INTEGER :: next, nprocs, count
      INTEGER :: NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h1b = 1,noab
        DO p5b = noab+1,noab+nvab
         DO h6b = 1,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1)*int_mb(k_range+h6b-1) 
     &            *int_mb(k_range+h1b-1)*int_mb(k_range+p5b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     &          CALL ERRQUIT('ccsd_t2_7_3',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              do h8b_in=ga_nodeid(),ga_nodeid()+noab-1
               h8b=mod(h8b_in,noab)+1
               do p7b_in=ga_nodeid()+1,ga_nodeid()+nvab
                p7b=mod(p7b_in,nvab)+noab+1
                IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p7b-1) .eq. 
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1)) THEN
                 IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p7b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h8b-1))))
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p3b,p7b,h1b,h8b,
     &                                  p3b_1,p7b_1,h1b_1,h8b_1)
                  CALL TCE_RESTRICTED_4(h6b,h8b,p5b,p7b,
     &                                  h6b_2,h8b_2,p5b_2,p7b_2)
                  dim_common = int_mb(k_range+p7b-1) 
     &                      *int_mb(k_range+h8b-1)
                  dima_sort = int_mb(k_range+p3b-1) 
     &                     *int_mb(k_range+h1b-1)
                  dimb_sort = int_mb(k_range+h6b-1) 
     &                     *int_mb(k_range+p5b-1)
                  dima = dim_common*dima_sort
                  dimb = dim_common*dimb_sort
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                   IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     &                 CALL ERRQUIT('ccsd_t2_7_3',1,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     &                 CALL ERRQUIT('ccsd_t2_7_3',2,MA_ERR)
                   IF ((p7b .lt. p3b) .and. (h8b .lt. h1b)) THEN
                    CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                   int_mb(k_a_offset),(h1b_1-1+noab*(h8b_1-1+noab*
     &                   (p3b_1-noab-1+nvab*(p7b_1-noab-1)))))
                    CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),
     &                   4,2,3,1,1.0d0)
                   END IF
                   IF ((p7b .lt. p3b) .and. (h1b .le. h8b)) THEN
                    CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                   int_mb(k_a_offset),(h8b_1-1+noab*(h1b_1-1+noab*
     &                   (p3b_1-noab-1+nvab*(p7b_1-noab-1)))))
                    CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),
     &                   3,2,4,1,-1.0d0)
                   END IF
                   IF ((p3b .le. p7b) .and. (h8b .lt. h1b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                  int_mb(k_a_offset),(h1b_1-1+noab*(h8b_1-1+noab*
     &                  (p7b_1-noab-1+nvab*(p3b_1-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                      int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),
     &                      int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),
     &                      4,1,3,2,-1.0d0)
                   END IF
                   IF ((p3b .le. p7b) .and. (h1b .le. h8b)) THEN
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     &                  int_mb(k_a_offset),(h8b_1-1+noab*(h1b_1-1+noab*
     &                  (p7b_1-noab-1+nvab*(p3b_1-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                  int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),
     &                  int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),
     &                  3,1,4,2,1.0d0)
                   END IF
                   IF (.not.MA_POP_STACK(l_a)) 
     &              CALL ERRQUIT('ccsd_t2_7_3',3,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     &              CALL ERRQUIT('ccsd_t2_7_3',4,MA_ERR)
                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     &              CALL ERRQUIT('ccsd_t2_7_3',5,MA_ERR)
                   IF ((h8b .lt. h6b) .and. (p7b .lt. p5b)) THEN
                    if(.not.intorb) then
                     CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                    int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                    (p7b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                    (h8b_2-1)))))
                    else
                     CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                    int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                    (p7b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                    (h8b_2-1)))),p5b_2,p7b_2,h6b_2,h8b_2)
                    end if
                    CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                   int_mb(k_range+h8b-1),int_mb(k_range+h6b-1),
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
     &                   4,2,1,3,1.0d0)
                   END IF
                   IF ((h8b .lt. h6b) .and. (p5b .le. p7b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                   (h8b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                   (h8b_2-1)))),p7b_2,p5b_2,h6b_2,h8b_2)
                    end if
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                  int_mb(k_range+h8b-1),int_mb(k_range+h6b-1),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
     &                  3,2,1,4,-1.0d0)
                   END IF
                   IF ((h6b .le. h8b) .and. (p7b .lt. p5b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p5b_2,p7b_2,h8b_2,h6b_2)
                    end if
                    CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h8b-1),
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
     &                   4,1,2,3,-1.0d0)
                   END IF
                   IF ((h6b .le. h8b) .and. (p5b .le. p7b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p7b_2,p5b_2,h8b_2,h6b_2)
                    end if
                    CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h8b-1),
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
     &                   3,1,2,4,1.0d0)
                   END IF
                   IF (.not.MA_POP_STACK(l_b)) 
     &              CALL ERRQUIT('ccsd_t2_7_3',6,MA_ERR)
                   CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                        1.0d0,dbl_mb(k_as),dim_common,
     &                              dbl_mb(k_bs),dim_common,
     &                        1.0d0,dbl_mb(k_cs),dima_sort)
                   IF (.not.MA_POP_STACK(l_bs)) 
     &              CALL ERRQUIT('ccsd_t2_7_3',7,MA_ERR)
                   IF (.not.MA_POP_STACK(l_as)) 
     &              CALL ERRQUIT('ccsd_t2_7_3',8,MA_ERR)
                  END IF
                 END IF
                END IF
               END DO
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     &            CALL ERRQUIT('ccsd_t2_7_3',9,MA_ERR)
              CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &                     int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),
     &                     int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &                     4,2,3,1,-1.0d0/2.0d0)
              CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     &             int_mb(k_c_offset),(h6b-1+noab*(p5b-noab-1+nvab*
     &             (h1b-1+noab*( p3b-noab-1)))))
              IF (.not.MA_POP_STACK(l_c)) 
     &            CALL ERRQUIT('ccsd_t2_7_3',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     &            CALL ERRQUIT('ccsd_t2_7_3',11,MA_ERR)
              next = NXTASK(nprocs, 1)
             END IF
             count = count+1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      END



      SUBROUTINE ccsd_t2_7_x(d_a,k_a_offset,d_b,k_b_offset,
     &                       d_c,k_c_offset,maxh,maxp)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt+= -1*P( 4 )*Sum ( h6 p5 )*t ( p3 p5 h1 h6 )_t*i1 ( h6 p4 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      integer, intent(in) :: d_a, d_b, d_c
      integer, intent(in) :: k_a_offset, k_b_offset, k_c_offset
      integer, intent(in) :: maxh,maxp
      integer :: p3b, p4b, h1b, h2b, p5b, h6b
      integer :: p3b_1, p5b_1, h1b_1, h6b_1, p4b_2, h6b_2, h2b_2, p5b_2
      integer :: dima, dimb, dimc, dima_sort, dimb_sort, dim_common
#ifdef USE_TCE_CUBLAS
      double precision, allocatable, dimension(:), pinned :: f_t
      double precision, allocatable, dimension(:), device :: f_a, f_b, f_c
#else
      double precision, allocatable, dimension(:) :: f_t
      double precision, allocatable, dimension(:) :: f_a, f_b, f_c
#endif
      integer :: next, nprocs, count, NXTASK
      EXTERNAL NXTASK

      integer :: dimhhpp
      integer :: e_a

      e_a = 0
      dimhhpp = maxh*maxh*maxp*maxp
      allocate( f_a(1:dimhhpp), f_b(1:dimhhpp), f_c(1:dimhhpp), 
     &          f_t(1:dimhhpp), stat=e_a)
      if (e_a .gt. 0) then
        CALL ERRQUIT('ccsd_t2_7_x',dimhhpp*4,MA_ERR)
      end if

      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = 1,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1)*int_mb(k_range+p4b-1)
     &             * int_mb(k_range+h1b-1)*int_mb(k_range+h2b-1)
              f_c = 0.0d0
              DO p5b = noab+1,noab+nvab
               DO h6b = 1,noab
                IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. 
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h6b-1)) THEN
                 IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h6b-1))))
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h6b,
     &                                  p3b_1,p5b_1,h1b_1,h6b_1)
                  CALL TCE_RESTRICTED_4(p4b,h6b,h2b,p5b,
     &                                  p4b_2,h6b_2,h2b_2,p5b_2)
                  dim_common = int_mb(k_range+p5b-1)
     &                       * int_mb(k_range+h6b-1)
                  dima_sort = int_mb(k_range+p3b-1)
     &                      * int_mb(k_range+h1b-1)
                  dimb_sort = int_mb(k_range+p4b-1)
     &                      * int_mb(k_range+h2b-1)
                  dima = dim_common*dima_sort
                  dimb = dim_common*dimb_sort
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                   IF ((p5b .lt. p3b) .and. (h6b .lt. h1b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                   int_mb(k_a_offset),(h1b_1-1+noab*(h6b_1-1+noab*
     &                   (p3b_1-noab-1+nvab*(p5b_1-noab-1)))))
                    CALL TCE_SORT_4_x(f_t,f_a,
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),
     &                   4,2,3,1,1.0d0)
                   END IF
                   IF ((p5b .lt. p3b) .and. (h1b .le. h6b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                   int_mb(k_a_offset),(h6b_1-1+noab*(h1b_1-1+noab*
     &                   (p3b_1-noab-1+nvab*(p5b_1-noab-1)))))
                    CALL TCE_SORT_4_x(f_t,f_a,
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),
     &                   3,2,4,1,-1.0d0)
                   END IF
                   IF ((p3b .le. p5b) .and. (h6b .lt. h1b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                   int_mb(k_a_offset),(h1b_1-1+noab*(h6b_1-1+noab*
     &                   (p5b_1-noab-1+nvab*(p3b_1-noab-1)))))
                    CALL TCE_SORT_4_x(f_t,f_a,
     &                   int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),
     &                   4,1,3,2,-1.0d0)
                   END IF
                   IF ((p3b .le. p5b) .and. (h1b .le. h6b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                   int_mb(k_a_offset),(h6b_1-1+noab*(h1b_1-1+noab*
     &                   (p5b_1-noab-1+nvab*(p3b_1-noab-1)))))
                    CALL TCE_SORT_4_x(f_t,f_a,
     &                   int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),
     &                   int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),
     &                   3,1,4,2,1.0d0)
                   END IF
                   CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                  int_mb(k_b_offset),(h6b_2-1+noab*(p5b_2-noab-1+
     &                  nvab*(h2b_2-1+noab*(p4b_2-noab-1)))))
                   CALL TCE_SORT_4_x(f_t,f_b,
     &                  int_mb(k_range+p4b-1),int_mb(k_range+h6b-1),
     &                  int_mb(k_range+h2b-1),int_mb(k_range+p5b-1),
     &                  3,1,2,4,1.0d0)
                   block
#ifdef USE_TCE_CUBLAS
                    ! the CUBLAS interface only support INT32
                    use iso_fortran_env, only: INT32
                    use cublas, only : DGEMM
                    integer(kind=INT32) :: m,n,k
#else
                    integer :: m,n,k
#endif
                    m = dima_sort
                    n = dimb_sort
                    k = dim_common
                    CALL DGEMM('T','N',m,n,k,
     &                          1.0d0,f_a,k,f_b,k,1.0d0,f_c,m)
                   end block
                  END IF
                 END IF
                END IF
               END DO
              END DO
              IF ((p3b .le. p4b) .and. (h1b .le. h2b)) THEN
               CALL TCE_SORT_4_x(f_c,f_t,
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              4,2,3,1,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,f_t,dimc,
     &              int_mb(k_c_offset),(h2b-1+noab*(h1b-1+noab*
     &              (p4b-noab-1+nvab*(p3b-noab-1)))))
              END IF
              IF ((p3b .le. p4b) .and. (h2b .le. h1b)) THEN
               CALL TCE_SORT_4_x(f_c,f_t,
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              4,2,1,3,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,f_t,dimc,
     &              int_mb(k_c_offset),(h1b-1+noab*(h2b-1+noab*
     &              (p4b-noab-1+nvab*(p3b-noab-1)))))
              END IF
              IF ((p4b .le. p3b) .and. (h1b .le. h2b)) THEN
               CALL TCE_SORT_4_x(f_c,f_t,
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              2,4,3,1,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,f_t,dimc,
     &              int_mb(k_c_offset),(h2b-1+noab*(h1b-1+noab*
     &              (p3b-noab-1+nvab*(p4b-noab-1)))))
              END IF
              IF ((p4b .le. p3b) .and. (h2b .le. h1b)) THEN
               CALL TCE_SORT_4_x(f_c,f_t,
     &              int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),
     &              int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &              2,4,1,3,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,f_t,dimc,
     &              int_mb(k_c_offset),(h1b-1+noab*(h2b-1+noab*
     &              (p3b-noab-1+nvab*(p4b-noab-1)))))
              END IF
              next = NXTASK(nprocs, 1)
             END IF
             count = count+1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO

      deallocate( f_a, f_b, f_c, f_t, stat=e_a )
      if (e_a .gt. 0) then
        CALL ERRQUIT('ccsd_t2_7_x',e_a,MA_ERR)
      end if

      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      END

      SUBROUTINE ccsd_t2_7_1_x(d_a,k_a_offset,
     &                         d_c,k_c_offset,maxh,maxp)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_v+= 1*v ( h6 p3 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER, intent(in) :: d_a,d_c
      INTEGER, intent(in) :: k_a_offset,k_c_offset
      integer, intent(in) :: maxh,maxp
      integer :: dimhhpp,dimpppp
      INTEGER NXTASK,next,nprocs,count
      INTEGER p3b,h6b,h1b,p5b,p3b_1,h6b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_as,l_as,k_a,l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h1b = 1,noab
        DO p5b = noab+1,noab+nvab
         DO h6b = 1,noab
          IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1         +int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1)
     2         +int_mb(k_spin+p5b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. 
     1         int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),
     1          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     2          .eq. irrep_v) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1)*int_mb(k_range+h6b-1) 
     1            *int_mb(k_range+h1b-1)*int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(p3b,h6b,h1b,p5b,
     1                              p3b_1,h6b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as)) 
     1              CALL ERRQUIT('ccsd_t2_7_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a)) 
     1              CALL ERRQUIT('ccsd_t2_7_1',1,MA_ERR)
               IF ((h6b .le. p3b) .and. (h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1-1+(noab+nvab)*
     2                (h1b_1-1+(noab+nvab)*(p3b_1-1+
     3                (noab+nvab)*(h6b_1-1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1-1+(noab+nvab)*
     2                (h1b_1-1+(noab+nvab)*(p3b_1-1+
     3                (noab+nvab)*(h6b_1-1)))),
     4                p5b_1,h1b_1,p3b_1,h6b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),
     3               2,1,3,4,1.0d0)
               END IF
               IF (.not.MA_POP_STACK(l_a)) 
     1              CALL ERRQUIT('ccsd_t2_7_1',2,MA_ERR)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_as),dimc,
     1              int_mb(k_c_offset),(h6b-1+noab*
     2              (p5b-noab-1+nvab*(h1b-1+noab*
     3              (p3b-noab-1)))))
               IF (.not.MA_POP_STACK(l_as)) 
     1              CALL ERRQUIT('ccsd_t2_7_1',5,MA_ERR)
              END IF
              next = NXTASK(nprocs, 1)
             END IF
             count = count+1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      END





      SUBROUTINE ccsd_t2_7_2_x(d_a,k_a_offset,d_b,k_b_offset,
     &                         d_c,k_c_offset,maxh,maxp)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_vt+= -1*Sum ( p7 )*t ( p7 h1 )_t*v ( h6 p3 p5 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      integer, intent(in) :: d_a, d_b, d_c
      integer, intent(in) :: k_a_offset, k_b_offset, k_c_offset
      integer, intent(in) :: maxh,maxp
      integer :: dimhhpp,dimpppp
      integer :: p3b, h6b, h1b, p5b, p7b
      integer :: p7b_1, h1b_1, p3b_2, h6b_2, p5b_2, p7b_2, p7b_in
      integer :: dima, dimb, dimc, dim_common, dima_sort, dimb_sort
      integer :: k_a, l_a, k_b, l_b, k_c, l_c
      integer :: k_as, l_as, k_bs, l_bs, k_cs, l_cs
      integer :: next, nprocs, count
      integer :: NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h1b = 1,noab
        DO p5b = noab+1,noab+nvab
         DO h6b = 1,noab
          IF ((.not.restricted).or.
     &          ( int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1)
     &           +int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h6b-1)
     &             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) 
     &         CALL ERRQUIT('ccsd_t2_7_2',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              do p7b_in=ga_nodeid()+1,ga_nodeid()+nvab
               p7b=mod(p7b_in,nvab)+noab+1
               IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
                IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) 
     &                     .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_2(p7b,h1b,
     &                                 p7b_1,h1b_1)
                 CALL TCE_RESTRICTED_4(p3b,h6b,p5b,p7b,
     &                                 p3b_2,h6b_2,p5b_2,p7b_2)
                 dim_common = int_mb(k_range+p7b-1)
                 dima_sort = int_mb(k_range+h1b-1)
                 dimb_sort = int_mb(k_range+p3b-1)
     &                     * int_mb(k_range+h6b-1)
     &                     * int_mb(k_range+p5b-1)
                 dima = dim_common*dima_sort
                 dimb = dim_common*dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',1,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',2,MA_ERR)
                  CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     &                 int_mb(k_a_offset),(h1b_1-1+noab*(p7b_1-noab-1)))
                  CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),
     &                 int_mb(k_range+p7b-1),int_mb(k_range+h1b-1),
     &                 2,1,1.0d0)
                  IF (.not.MA_POP_STACK(l_a)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',3,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',4,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',5,MA_ERR)
                  IF ((h6b .le. p3b) .and. (p7b .lt. p5b)) THEN
                   if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                   else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p5b_2,p7b_2,p3b_2,h6b_2)
                   end if
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                  int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),
     &                  int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
     &                  4,1,2,3,-1.0d0)
                  END IF
                  IF ((h6b .le. p3b) .and. (p5b .le. p7b)) THEN
                   if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                   else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p7b_2,p5b_2,p3b_2,h6b_2)
                   end if
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                  int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
     &                  3,1,2,4,1.0d0)
                  END IF
                  IF (.not.MA_POP_STACK(l_b)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',6,MA_ERR)
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                 1.0d0,dbl_mb(k_as),dim_common,
     &                       dbl_mb(k_bs),dim_common,
     &                 1.0d0,dbl_mb(k_cs),dima_sort)
                  IF (.not.MA_POP_STACK(l_bs)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',7,MA_ERR)
                  IF (.not.MA_POP_STACK(l_as)) 
     &              CALL ERRQUIT('ccsd_t2_7_2',8,MA_ERR)
                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) 
     &          CALL ERRQUIT('ccsd_t2_7_2',9,MA_ERR)
              CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &             int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),
     &             int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),
     &             3,2,4,1,-1.0d0)
              CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     &             int_mb(k_c_offset),(h6b-1+noab*(p5b-noab-1+nvab*
     &             (h1b-1+noab*(p3b-noab-1)))))
              IF (.not.MA_POP_STACK(l_c)) 
     &           CALL ERRQUIT('ccsd_t2_7_2',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs)) 
     &          CALL ERRQUIT('ccsd_t2_7_2',11,MA_ERR)
              next = NXTASK(nprocs, 1)
             END IF
             count = count+1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      END



      SUBROUTINE ccsd_t2_7_3_x(d_a,k_a_offset,d_b,k_b_offset,
     &                         d_c,k_c_offset,maxh,maxp)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_vt+=-1/2*Sum ( h8 p7 )*t ( p3 p7 h1 h8 )_t*v ( h6 h8 p5 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER, intent(in) :: d_a, d_b, d_c
      INTEGER, intent(in) :: k_a_offset, k_b_offset, k_c_offset
      integer, intent(in) :: maxh,maxp
      INTEGER :: p3b, h6b, h1b, p5b, p7b, h8b
      INTEGER :: p3b_1, p7b_1, h1b_1, h8b_1, h6b_2, h8b_2, p5b_2, p7b_2
      integer :: p7b_in,h8b_in
      integer :: dima, dimb, dimc, dima_sort, dimb_sort, dim_common
#ifdef USE_TCE_CUBLAS
      double precision, allocatable, dimension(:), pinned :: f_t
      double precision, allocatable, dimension(:), device :: f_a, f_b, f_c
#else
#warning NO GPU ALLOCATIONS
      double precision, allocatable, dimension(:) :: f_t
      double precision, allocatable, dimension(:) :: f_a, f_b, f_c
#endif
      INTEGER :: next, nprocs, count
      INTEGER :: NXTASK
      EXTERNAL NXTASK

      integer :: dimhhpp
      integer :: e_a

      dimhhpp = maxh*maxh*maxp*maxp
      allocate( f_a(1:dimhhpp), f_b(1:dimhhpp), f_c(1:dimhhpp), 
     &          f_t(1:dimhhpp), stat=e_a)
      if (e_a .ne. 0) then
        CALL ERRQUIT('ccsd_t2_7_3_x',dimhhpp*4,MA_ERR)
      end if

      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h1b = 1,noab
        DO p5b = noab+1,noab+nvab
         DO h6b = 1,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1)*int_mb(k_range+h6b-1) 
     &             * int_mb(k_range+h1b-1)*int_mb(k_range+p5b-1)
              f_c = 0.0d0
              do h8b_in=ga_nodeid(),ga_nodeid()+noab-1
               h8b=mod(h8b_in,noab)+1
               do p7b_in=ga_nodeid()+1,ga_nodeid()+nvab
                p7b=mod(p7b_in,nvab)+noab+1
                IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p7b-1) .eq. 
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1)) THEN
                 IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p7b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h8b-1))))
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p3b,p7b,h1b,h8b,
     &                                  p3b_1,p7b_1,h1b_1,h8b_1)
                  CALL TCE_RESTRICTED_4(h6b,h8b,p5b,p7b,
     &                                  h6b_2,h8b_2,p5b_2,p7b_2)
                  dim_common = int_mb(k_range+p7b-1) 
     &                       * int_mb(k_range+h8b-1)
                  dima_sort = int_mb(k_range+p3b-1) 
     &                      * int_mb(k_range+h1b-1)
                  dimb_sort = int_mb(k_range+h6b-1) 
     &                      * int_mb(k_range+p5b-1)
                  dima = dim_common * dima_sort
                  dimb = dim_common * dimb_sort
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                   IF ((p7b .lt. p3b) .and. (h8b .lt. h1b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                   int_mb(k_a_offset),(h1b_1-1+noab*(h8b_1-1+noab*
     &                   (p3b_1-noab-1+nvab*(p7b_1-noab-1)))))
                    CALL TCE_SORT_4_X(f_t,f_a,
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),
     &                   4,2,3,1,1.0d0)
                   END IF
                   IF ((p7b .lt. p3b) .and. (h1b .le. h8b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                   int_mb(k_a_offset),(h8b_1-1+noab*(h1b_1-1+noab*
     &                   (p3b_1-noab-1+nvab*(p7b_1-noab-1)))))
                    CALL TCE_SORT_4_x(f_t,f_a,
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p3b-1),
     &                   int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),
     &                   3,2,4,1,-1.0d0)
                   END IF
                   IF ((p3b .le. p7b) .and. (h8b .lt. h1b)) THEN
                   CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                  int_mb(k_a_offset),(h1b_1-1+noab*(h8b_1-1+noab*
     &                  (p7b_1-noab-1+nvab*(p3b_1-noab-1)))))
                   CALL TCE_SORT_4_x(f_t,f_a,
     &                  int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),
     &                  int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),
     &                  4,1,3,2,-1.0d0)
                   END IF
                   IF ((p3b .le. p7b) .and. (h1b .le. h8b)) THEN
                   CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                  int_mb(k_a_offset),(h8b_1-1+noab*(h1b_1-1+noab*
     &                  (p7b_1-noab-1+nvab*(p3b_1-noab-1)))))
                   CALL TCE_SORT_4_x(f_t,f_a,
     &                  int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),
     &                  int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),
     &                  3,1,4,2,1.0d0)
                   END IF
                   IF ((h8b .lt. h6b) .and. (p7b .lt. p5b)) THEN
                    if(.not.intorb) then
                     CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                    int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                    (p7b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                    (h8b_2-1)))))
                    else
                     CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                    int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                    (p7b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                    (h8b_2-1)))),p5b_2,p7b_2,h6b_2,h8b_2)
                    end if
                    CALL TCE_SORT_4_x(f_t,f_b,
     &                   int_mb(k_range+h8b-1),int_mb(k_range+h6b-1),
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
     &                   4,2,1,3,1.0d0)
                   END IF
                   IF ((h8b .lt. h6b) .and. (p5b .le. p7b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                   (h8b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                   (h8b_2-1)))),p7b_2,p5b_2,h6b_2,h8b_2)
                    end if
                   CALL TCE_SORT_4_x(f_t,f_b,
     &                  int_mb(k_range+h8b-1),int_mb(k_range+h6b-1),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
     &                  3,2,1,4,-1.0d0)
                   END IF
                   IF ((h6b .le. h8b) .and. (p7b .lt. p5b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p5b_2,p7b_2,h8b_2,h6b_2)
                    end if
                    CALL TCE_SORT_4_x(f_t,f_b,
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h8b-1),
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
     &                   4,1,2,3,-1.0d0)
                   END IF
                   IF ((h6b .le. h8b) .and. (p5b .le. p7b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p7b_2,p5b_2,h8b_2,h6b_2)
                    end if
                    CALL TCE_SORT_4_x(f_t,f_b,
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h8b-1),
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
     &                   3,1,2,4,1.0d0)
                   END IF
                   block
#ifdef USE_TCE_CUBLAS
                    ! the CUBLAS interface only support INT32
                    use iso_fortran_env, only: INT32
                    use cublas, only : DGEMM
                    integer(kind=INT32) :: m,n,k
#else
                    integer :: m,n,k
#endif
                    m = dima_sort
                    n = dimb_sort
                    k = dim_common
                    CALL DGEMM('T','N',m,n,k,
     &                          1.0d0,f_a,k,f_b,k,1.0d0,f_c,m)
                   end block
                  END IF
                 END IF
                END IF
               END DO
              END DO
              CALL TCE_SORT_4_x(f_c,f_t,
     &             int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),
     &             int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
     &             4,2,3,1,-1.0d0/2.0d0)
              CALL ADD_HASH_BLOCK(d_c,f_t,dimc,
     &             int_mb(k_c_offset),(h6b-1+noab*(p5b-noab-1+nvab*
     &             (h1b-1+noab*( p3b-noab-1)))))
              next = NXTASK(nprocs, 1)
             END IF
             count = count+1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO

      deallocate( f_a, f_b, f_c, f_t, stat=e_a )
      if (e_a .ne. 0) then
        CALL ERRQUIT('ccsd_t2_7_3_x',e_a,MA_ERR)
      end if

      next = NXTASK(-nprocs, 1)
      call GA_SYNC()

      END


      ! this function creates a tensor descriptor and assigns the modes
      ! accordingly (i.e., it can be interpreted as a tensor view--no
      ! computation is happening here)
      subroutine create_cutensor_tensor_view(handle,
     &                                       ex1,ex2,ex3,ex4,
     &                                       mode1,mode2,mode3,mode4,
     &                                       scalarIn, scalarOut, desc, modes)
               use cutensor_v2
               implicit none
#include "stdio.fh"
#include "errquit.fh"
               type(cutensorHandle), intent(in) :: handle
               integer, intent(in) :: ex1,ex2,ex3,ex4
               integer, intent(in) :: mode1,mode2,mode3,mode4
               double precision, intent(in) :: scalarIn
               double precision, intent(out) :: scalarOut
               type(cutensorTensorDescriptor), intent(out) :: desc
               integer(4), parameter :: ndim = 4
               integer(4), dimension(ndim), intent(out) :: modes
               integer(8), dimension(ndim) :: extents
               integer(8), dimension(ndim) :: strides
               integer(4), parameter :: ialign = 128
               type(cutensorStatus) :: cstat
               integer :: i

               scalarOut = scalarOut * scalarIn

               extents(1) = ex1
               extents(2) = ex2
               extents(3) = ex3
               extents(4) = ex4
               modes(1) = mode1
               modes(2) = mode2
               modes(3) = mode3
               modes(4) = mode4
               strides(ndim) = 1
               do i = ndim-1, 1, -1
                 strides(i) = strides(i+1) * extents(i+1)
               end do

               cstat = cutensorCreateTensorDescriptor(handle, desc,
     &                           ndim, extents, strides,
     &                           cuTensorDataType(CUDA_R_64F), ialign)

               if (cstat.ne.CUTENSOR_STATUS_SUCCESS) then
                 write(LuOut,*) cutensorGetErrorString(cstat)
                 CALL ERRQUIT('create_cutensor_tensor_view',cstat,UNKNOWN_ERR)
               end if

      end subroutine create_cutensor_tensor_view

      SUBROUTINE ccsd_t2_7_3_y(d_a,k_a_offset,d_b,k_b_offset,
     &                         d_c,k_c_offset,maxh,maxp)
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h6 p3 h1 p5 )_vt+=-1/2*Sum ( h8 p7 )*t ( p3 p7 h1 h8 )_t*v ( h6 h8 p5 p7 )_v
      use cudafor
      use cutensor_v2
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER, intent(in) :: d_a, d_b, d_c
      INTEGER, intent(in) :: k_a_offset, k_b_offset, k_c_offset
      integer, intent(in) :: maxh,maxp
      INTEGER :: p3b, h6b, h1b, p5b, p7b, h8b
      INTEGER :: p3b_1, p7b_1, h1b_1, h8b_1, h6b_2, h8b_2, p5b_2, p7b_2
      integer :: p7b_in,h8b_in
      integer :: dima, dimb, dimc, dima_sort, dimb_sort, dim_common
#ifdef USE_TCE_CUBLAS
      double precision, allocatable, dimension(:), pinned :: f_t
      double precision, allocatable, dimension(:), device :: f_a, f_b, f_c, f_w
#else
#warning NO GPU ALLOCATIONS
      double precision, allocatable, dimension(:) :: f_t
      double precision, allocatable, dimension(:) :: f_a, f_b, f_c
#endif
      INTEGER :: next, nprocs, count
      INTEGER :: NXTASK
      EXTERNAL NXTASK

      !integer :: p3,p5,p7,h1,h6,h8 !mode IDs
      integer :: dimhhpp, m, n
      integer :: e_a

      integer :: err
      integer(kind=cuda_stream_kind) :: stream
      type(cutensorStatus) :: cstat
      type(cutensorHandle) :: handle
      type(cutensorTensorDescriptor) :: descA, descB, descC
      type(cutensorOperationDescriptor) :: cdesc
      type(cutensorComputeDescriptor) :: descCompute
      type(cutensorPlan) :: plan
      type(cutensorAlgo) :: algo
      type(cutensorPlanPreference) :: pref

      integer, parameter :: ndim = 4
      real :: alpha, beta
      integer(4), dimension(ndim) :: modesA, modesB, modesC

      ! unique identifies for each mode
      !p3 = 0
      !h6 = 1
      !h1 = 2
      !p5 = 3
      !h8 = 4
      !p7 = 5

      ! Init
      err = cudaStreamCreate(stream)
      if (err.ne.0) call errquit('cudaStreamCreate',err,UNKNOWN_ERR)

      cstat = cutensorCreate(handle)
!      if (cstat.ne.CUTENSOR_STATUS_SUCCESS)
!     &     print*,cutensorGetErrorString(cstat)
      ! TODO check if CUTENSOR_JIT_MODE_DEFAULT improves perf
      cstat = cutensorCreatePlanPreference(handle, pref,
     &   CUTENSOR_ALGO_DEFAULT, CUTENSOR_JIT_MODE_NONE)
!      if (cstat.ne.CUTENSOR_STATUS_SUCCESS)
!     &   print *,cutensorGetErrorString(cstat)

      dimhhpp = maxh*maxh*maxp*maxp
      allocate( f_a(1:dimhhpp), f_b(1:dimhhpp), f_c(1:dimhhpp), 
     &          f_w(1:dimhhpp*3), f_t(1:dimhhpp), stat=e_a)
      if (e_a .ne. 0) then
        CALL ERRQUIT('ccsd_t2_7_3_y',dimhhpp*4,MA_ERR)
      end if

      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h1b = 1,noab
        DO p5b = noab+1,noab+nvab
         DO h6b = 1,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h6b-1) .eq. 
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h6b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) 
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1)*int_mb(k_range+h6b-1) 
     &             * int_mb(k_range+h1b-1)*int_mb(k_range+p5b-1)

              !f_c = 0.0d0 ! removed: set beta = 0 for the first GEMM
              beta = 0.0
              dima_sort = int_mb(k_range+p3b-1) 
     &                  * int_mb(k_range+h1b-1)
              dimb_sort = int_mb(k_range+h6b-1) 
     &                  * int_mb(k_range+p5b-1)
              m = dima_sort
              n = dimb_sort

              do h8b_in=ga_nodeid(),ga_nodeid()+noab-1
               h8b=mod(h8b_in,noab)+1
               do p7b_in=ga_nodeid()+1,ga_nodeid()+nvab
                p7b=mod(p7b_in,nvab)+noab+1
                IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p7b-1) .eq. 
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1)) THEN
                 IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p7b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h8b-1))))
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p3b,p7b,h1b,h8b,
     &                                  p3b_1,p7b_1,h1b_1,h8b_1)
                  CALL TCE_RESTRICTED_4(h6b,h8b,p5b,p7b,
     &                                  h6b_2,h8b_2,p5b_2,p7b_2)
                  dim_common = int_mb(k_range+p7b-1) 
     &                       * int_mb(k_range+h8b-1)
                  dima = dim_common * dima_sort
                  dimb = dim_common * dimb_sort

                  alpha = 1.0d0

                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                   IF ((p7b .lt. p3b) .and. (h8b .lt. h1b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                   int_mb(k_a_offset),(h1b_1-1+noab*(h8b_1-1+noab*
     &                   (p3b_1-noab-1+nvab*(p7b_1-noab-1)))))
!                    CALL TCE_SORT_4_X(f_t,f_a,
!     &                   int_mb(k_range+p7b-1),int_mb(k_range+p3b-1),
!     &                   int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),
!     &                   4,2,3,1,1.0d0)
                     CALL create_cutensor_tensor_view(handle,
     &                    int_mb(k_range+p7b-1),int_mb(k_range+p3b-1),
     &                    int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),
     &                    7,3,8,1,1.0d0,alpha, descA, modesA)
                   IF ((p7b .lt. p3b) .and. (h1b .le. h8b)) THEN
                    CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                   int_mb(k_a_offset),(h8b_1-1+noab*(h1b_1-1+noab*
     &                   (p3b_1-noab-1+nvab*(p7b_1-noab-1)))))
                    ! h1,p3,h8,p7 <- p7,p3,h1,h8
!                    CALL TCE_SORT_4_x(f_t,f_a,
!     &                   int_mb(k_range+p7b-1),int_mb(k_range+p3b-1),
!     &                   int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),
!     &                   3,2,4,1,-1.0d0)
                     CALL create_cutensor_tensor_view(handle,
     &                    int_mb(k_range+p7b-1),int_mb(k_range+p3b-1),
     &                    int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),
     &                    7,3,1,8,-1.0d0,alpha, descA, modesA)
                   END IF
                   IF ((p3b .le. p7b) .and. (h8b .lt. h1b)) THEN
                   CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                  int_mb(k_a_offset),(h1b_1-1+noab*(h8b_1-1+noab*
     &                  (p7b_1-noab-1+nvab*(p3b_1-noab-1)))))
!                   CALL TCE_SORT_4_x(f_t,f_a,
!     &                  int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),
!     &                  int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),
!     &                  4,1,3,2,-1.0d0)
                     CALL create_cutensor_tensor_view(handle,
     &                    int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),
     &                    int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),
     &                    3,7,8,1,-1.0d0,alpha, descA, modesA)
                   END IF
                   IF ((p3b .le. p7b) .and. (h1b .le. h8b)) THEN
                   CALL GET_HASH_BLOCK(d_a,f_t,dima,
     &                  int_mb(k_a_offset),(h8b_1-1+noab*(h1b_1-1+noab*
     &                  (p7b_1-noab-1+nvab*(p3b_1-noab-1)))))
                   ! h1,p3,h8,p7 <- p3,p7,h1,h8
!                   CALL TCE_SORT_4_x(f_t,f_a,
!     &                  int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),
!     &                  int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),
!     &                  3,1,4,2,1.0d0)
                     CALL create_cutensor_tensor_view(handle,
     &                    int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),
     &                    int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),
     &                    3,7,1,8,1.0d0,alpha, descA, modesA)
                   END IF
                   f_a = f_t

                   IF ((h8b .lt. h6b) .and. (p7b .lt. p5b)) THEN
                    if(.not.intorb) then
                     CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                    int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                    (p7b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                    (h8b_2-1)))))
                    else
                     CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                    int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                    (p7b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                    (h8b_2-1)))),p5b_2,p7b_2,h6b_2,h8b_2)
                    end if
!                    CALL TCE_SORT_4_x(f_t,f_b,
!     &                   int_mb(k_range+h8b-1),int_mb(k_range+h6b-1),
!     &                   int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
!     &                   4,2,1,3,1.0d0)
                    CALL create_cutensor_tensor_view(handle,
     &                   int_mb(k_range+h8b-1),int_mb(k_range+h6b-1),
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
     &                   8,6,7,5,1.0d0,alpha, descB, modesB)
                   END IF
                   IF ((h8b .lt. h6b) .and. (p5b .le. p7b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                   (h8b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h6b_2-1+(noab+nvab)*
     &                   (h8b_2-1)))),p7b_2,p5b_2,h6b_2,h8b_2)
                    end if
!                   CALL TCE_SORT_4_x(f_t,f_b,
!     &                  int_mb(k_range+h8b-1),int_mb(k_range+h6b-1),
!     &                  int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
!     &                  3,2,1,4,-1.0d0)
                    CALL create_cutensor_tensor_view(handle,
     &                   int_mb(k_range+h8b-1),int_mb(k_range+h6b-1),
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
     &                   8,6,5,7,-1.0d0,alpha, descB, modesB)
                   END IF
                   IF ((h6b .le. h8b) .and. (p7b .lt. p5b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p5b_2-1+(noab+nvab)*
     &                   (p7b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p5b_2,p7b_2,h8b_2,h6b_2)
                    end if
!                    CALL TCE_SORT_4_x(f_t,f_b,
!     &                   int_mb(k_range+h6b-1),int_mb(k_range+h8b-1),
!     &                   int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
!     &                   4,1,2,3,-1.0d0)
                    CALL create_cutensor_tensor_view(handle,
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h8b-1),
     &                   int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),
     &                   6,8,7,5,-1.0d0,alpha, descB, modesB)
                   END IF
                   IF ((h6b .le. h8b) .and. (p5b .le. p7b)) THEN
                    if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))))
                    else
                    CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                   int_mb(k_b_offset),(p7b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(h8b_2-1+(noab+nvab)*
     &                   (h6b_2-1)))),p7b_2,p5b_2,h8b_2,h6b_2)
                    end if
!                    CALL TCE_SORT_4_x(f_t,f_b,
!     &                   int_mb(k_range+h6b-1),int_mb(k_range+h8b-1),
!     &                   int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
!     &                   3,1,2,4,1.0d0)
                    CALL create_cutensor_tensor_view(handle,
     &                   int_mb(k_range+h6b-1),int_mb(k_range+h8b-1),
     &                   int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),
     &                   6,8,5,7,1.0d0,alpha, descB, modesB)
                   END IF
                   f_b = f_t

                   descCompute = CUTENSOR_COMPUTE_DESC_64F
                   
                   modesC(1) = 3
                   modesC(2) = 6
                   modesC(3) = 1
                   modesC(4) = 5

                   ! p3,h6,h1,p5 <- p5,h6,h1,p3
!                   CALL create_cutensor_tensor_view(handle,
!     &                  int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),
!     &                  int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
!     &                  5,6,1,3,1.0d0,alpha, descC, modesC)
                   CALL create_cutensor_tensor_view(handle,
     &                  int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),
     &                  3,1,5,6,1.0d0,alpha, descC, modesC)

                   cstat = cutensorCreateContraction(handle, cdesc,
     &                 descA, modesA, CUTENSOR_OP_IDENTITY,
     &                 descB, modesB, CUTENSOR_OP_IDENTITY,
     &                 descC, modesC, CUTENSOR_OP_IDENTITY,
     &                 descC, modesC, descCompute)
                   if (cstat.ne.CUTENSOR_STATUS_SUCCESS)
     &                print *,cutensorGetErrorString(cstat)

                   cstat = cutensorCreatePlan(handle, plan, cdesc,
     &                     pref, dimhhpp*3)
                   if (cstat.ne.CUTENSOR_STATUS_SUCCESS)
     &                 print *,cutensorGetErrorString(cstat)

                   cstat = cutensorContract(handle, plan, alpha,
     &                 f_a, f_b, beta, f_c, f_c,
     &                 f_w, dimhhpp*3, stream)
                   if (cstat.ne.CUTENSOR_STATUS_SUCCESS)
     &                  print *,cutensorGetErrorString(cstat)
                   ! p5,h6,h1,p3 <- (h1,p3),(h8,p7)^T x (p5,h6),(h8,p7) 
                   ! CALL DGEMM('T','N',m,n,k,1.0d0,f_a,k,f_b,k,beta,f_c,m)
                   !beta = 1.0d0

                   err = cudaStreamSynchronize(stream)
                   if (err.ne.0) then
                     call errquit('cudaStreamSync',err,UNKNOWN_ERR)
                   endif

                   f_t = -0.5d0 * f_c
                   CALL ADD_HASH_BLOCK(d_c,f_t,dimc,
     &                  int_mb(k_c_offset),(h6b-1+noab*(p5b-noab-1+nvab*
     &                  (h1b-1+noab*( p3b-noab-1)))))

                   cstat = cutensorDestroyPlan(plan)
                   if (cstat.ne.CUTENSOR_STATUS_SUCCESS) print *,cutensorGetErrorString(cstat)
                   cstat = cutensorDestroyOperationDescriptor(cdesc)
                   if (cstat.ne.CUTENSOR_STATUS_SUCCESS) print *,cutensorGetErrorString(cstat)
                   cstat = cutensorDestroyTensorDescriptor(descA)
                   if (cstat.ne.CUTENSOR_STATUS_SUCCESS) print *,cutensorGetErrorString(cstat)
                   cstat = cutensorDestroyTensorDescriptor(descB)
                   if (cstat.ne.CUTENSOR_STATUS_SUCCESS) print *,cutensorGetErrorString(cstat)
                   cstat = cutensorDestroyTensorDescriptor(descC)
                   if (cstat.ne.CUTENSOR_STATUS_SUCCESS) print *,cutensorGetErrorString(cstat)
                   END IF
                  END IF
                 END IF
                END IF
               END DO
              END DO
!              f_t = f_c
              ! TODO avoid this permute & merge scaling into last GETT
              ! p3,h6,h1,p5 <- p5,h6,h1,p3
!              CALL TCE_SORT_4_x(f_c,f_t,
!     &             int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),
!     &             int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),
!     &             4,2,3,1,-0.5d0)
!              CALL ADD_HASH_BLOCK(d_c,f_t,dimc,
!     &             int_mb(k_c_offset),(h6b-1+noab*(p5b-noab-1+nvab*
!     &             (h1b-1+noab*( p3b-noab-1)))))
!              next = NXTASK(nprocs, 1)
             END IF
             count = count+1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      cstat = cutensorDestroyPlanPreference(pref)
      if (cstat.ne.CUTENSOR_STATUS_SUCCESS) print *,cutensorGetErrorString(cstat)
      cstat = cutensorDestroy(handle)
      if (cstat.ne.CUTENSOR_STATUS_SUCCESS) print *,cutensorGetErrorString(cstat)

      err = cudaStreamDestroy(stream)
      if (err.ne.0) call errquit('cudaStreamDestroy',err,UNKNOWN_ERR)

      deallocate( f_a, f_b, f_c, f_t, f_w, stat=e_a )
      if (e_a .ne. 0) then
        CALL ERRQUIT('ccsd_t2_7_3_y',e_a,MA_ERR)
      end if

      next = NXTASK(-nprocs, 1)
      call GA_SYNC()

      END
