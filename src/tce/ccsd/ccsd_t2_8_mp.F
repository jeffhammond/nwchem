      SUBROUTINE ccsd_t2_8_test_mp(d_a,k_a_offset,
     &                             d_b,k_b_offset,
     &                             d_c,k_c_offset,
     &                             maxh,maxp)
!     $Id: ccsd_t2.F 27404 2015-08-24 14:20:43Z jhammond $
!     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
!     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
!     i0 ( p3 p4 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( p3 p4 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      integer, parameter :: sp = selected_real_kind(6, 37)
      integer, parameter :: dp = selected_real_kind(15, 307)
      INTEGER d_a,d_b,d_c
      INTEGER k_a_offset,k_b_offset,k_c_offset
      INTEGER maxh,maxp,dimhhpp,dimpppp,dimtemp
      INTEGER next,nprocs,count
      INTEGER p5b,p6b,p3b,p4b,h1b,h2b
      INTEGER p5b_1,p6b_1,h1b_1,h2b_1
      INTEGER p3b_2,p4b_2,p5b_2,p6b_2
      INTEGER dima,dimb,dimc,dim_common,dima_sort,dimb_sort
      real(kind=dp), allocatable :: df_t(:)
      real(kind=sp), allocatable :: sf_a(:)
      real(kind=sp), allocatable :: sf_b(:)
      real(kind=sp), allocatable :: sf_c(:)
      integer :: e_a,e_b,e_c,e_t
      integer :: i
      real(kind=sp) alpha
      integer p5b_in,p6b_in
      INTEGER NXTASK
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)

      dimhhpp = maxh*maxh*maxp*maxp
      dimpppp = maxp*maxp*maxp*maxp
      dimtemp = max(dimpppp,dimhhpp)

      allocate(sf_a(1:dimhhpp),stat=e_a)
      allocate(sf_b(1:dimpppp),stat=e_b)
      allocate(sf_c(1:dimhhpp),stat=e_c)
      allocate(df_t(1:dimtemp),stat=e_t)
      if (e_a.ne.0) call errquit("MA a",dimhhpp,MA_ERR)
      if (e_b.ne.0) call errquit("MA b",dimpppp,MA_ERR)
      if (e_c.ne.0) call errquit("MA c",dimhhpp,MA_ERR)
      if (e_t.ne.0) call errquit("MA t",dimtemp,MA_ERR)

      DO p3b = noab+1,noab+nvab
       DO p4b = p3b,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq.
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dima_sort = int_mb(k_range+h1b-1)
     &                  * int_mb(k_range+h2b-1)
              dimb_sort = int_mb(k_range+p3b-1)
     &                  * int_mb(k_range+p4b-1)
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
     &             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
!              CALL DFILL(dimc,0.0d0,f_c,1)
              do i=1, dimc
                 sf_c(i) = 0.0
              end do
#if 0
              DO p5b = noab+1,noab+nvab
               DO p6b = p5b,noab+nvab
#else
              DO p5b_in =ga_nodeid(),ga_nodeid()+nvab-1
                 p5b=mod(p5b_in,nvab)+noab+1
               DO p6b_in=ga_nodeid(),ga_nodeid()+nvab+noab-p5b
                  p6b=mod(p6b_in,noab+nvab-p5b+1)+p5b
#endif
                IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq.
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
                 IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,
     &                                  p5b_1,p6b_1,h1b_1,h2b_1)
                  CALL TCE_RESTRICTED_4(p3b,p4b,p5b,p6b,
     &                                  p3b_2,p4b_2,p5b_2,p6b_2)
                  dim_common = int_mb(k_range+p5b-1)
     &                       * int_mb(k_range+p6b-1)
                  dima = dim_common * dima_sort
                  dimb = dim_common * dimb_sort
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                   CALL GET_HASH_BLOCK(d_a,df_t,dima,
     &                  int_mb(k_a_offset),(h2b_1-1+noab*(h1b_1-1+noab*
     &                  (p6b_1-noab-1+nvab*(p5b_1-noab-1)))))
                   CALL tce_sort_4_mp_d2s(df_t,sf_a,
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),
     &                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     &                  4,3,2,1,1.0d0)
                   if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,df_t,dimb,
     &                   int_mb(k_b_offset),(p6b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(p4b_2-1+(noab+nvab)*
     &                   (p3b_2-1)))))
                   else
                    CALL GET_HASH_BLOCK_I(d_b,df_t,dimb,
     &                   int_mb(k_b_offset),(p6b_2-1+(noab+nvab)*
     &                   (p5b_2-1+(noab+nvab)*(p4b_2-1+(noab+nvab)*
     &                   (p3b_2-1)))),p6b_2,p5b_2,p4b_2,p3b_2)
                   end if
                   CALL tce_sort_4_mp_d2s(df_t,sf_b,
     &                  int_mb(k_range+p3b-1),int_mb(k_range+p4b-1),
     &                  int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),
     &                  2,1,4,3,1.0d0)
                   if (p5b .eq. p6b) then
                    alpha = 1.0
                   else
                    alpha = 2.0
                   end if
#ifdef HALF_PRECISION
                   call truncate_sp2hp(sf_a, dimhhpp)
                   call truncate_sp2hp(sf_b, dimpppp)
#endif
                   CALL SGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                  alpha,sf_a,dim_common,sf_b,
     &                  dim_common,1.0,sf_c,dima_sort)
#ifdef HALF_PRECISION
                   call truncate_sp2hp(sf_c, dimhhpp)
#endif
                  END IF
                 END IF
                END IF
               END DO
              END DO
              CALL tce_sort_4_mp_s2d(sf_c,df_t,
     &             int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),
     &             int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     &             2,1,4,3,0.5d0)
              CALL ADD_HASH_BLOCK(d_c,df_t,dimc,
     &             int_mb(k_c_offset),(h2b-1+noab*(h1b-1+noab*
     &             (p4b-noab-1+nvab*(p3b-noab-1)))))
              next = NXTASK(nprocs, 1)
             END IF
             count = count + 1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()

      deallocate(sf_a,stat=e_a)
      deallocate(sf_b,stat=e_b)
      deallocate(sf_c,stat=e_c)
      deallocate(df_t,stat=e_t)
      if (e_a.ne.0) call errquit("MA pops a",0,MA_ERR)
      if (e_b.ne.0) call errquit("MA pops b",0,MA_ERR)
      if (e_c.ne.0) call errquit("MA pops c",0,MA_ERR)
      if (e_t.ne.0) call errquit("MA pops t",1,MA_ERR)
      RETURN
      END
