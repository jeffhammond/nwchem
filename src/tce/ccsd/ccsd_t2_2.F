#if 0
! These are all the T2_2 terms:
!
! N^5 i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( h10 ) * t ( p3 h10 )_t * i1 ( h10 p4 h1 h2 )_v
!         i1 ( h10 p3 h1 h2 )_v + = 1 * v ( h10 p3 h1 h2 )_v
! N^5     i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( h11 ) * t ( p3 h11 )_t * i2 ( h10 h11 h1 h2 )_v
!             i2 ( h10 h11 h1 h2 )_v + = -1 * v ( h10 h11 h1 h2 )_v
! N^5         i2 ( h10 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i3 ( h10 h11 h2 p5 )_v
!                 i3 ( h10 h11 h1 p5 )_v + = 1 * v ( h10 h11 h1 p5 )_v
! N^5             i3 ( h10 h11 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 h11 p5 p6 )_v
! N^6         i2 ( h10 h11 h1 h2 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h10 h11 p7 p8 )_v
! N^5     i1 ( h10 p3 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i2 ( h10 p3 h2 p5 )_v
!             i2 ( h10 p3 h1 p5 )_v + = 1 * v ( h10 p3 h1 p5 )_v
! N^5         i2 ( h10 p3 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 p3 p5 p6 )_v
! N^5     i1 ( h10 p3 h1 h2 )_ft + = -1 * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i2 ( h10 p5 )_f
!             i2 ( h10 p5 )_f + = 1 * f ( h10 p5 )_f
! N^5         i2 ( h10 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h10 p5 p6 )_v
! N^6     i1 ( h10 p3 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h7 p9 ) * t ( p3 p9 h1 h7 )_t * i2 ( h7 h10 h2 p9 )_v
!             i2 ( h7 h10 h1 p9 )_v + = 1 * v ( h7 h10 h1 p9 )_v
! N^5         i2 ( h7 h10 h1 p9 )_vt + = 1 * Sum ( p5 ) * t ( p5 h1 )_t * v ( h7 h10 p5 p9 )_v
! N^6     i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h10 p3 p5 p6 )_v
      SUBROUTINE ccsd_t2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p3 p4 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( h10 ) * t ( p3 h10 )_t * i1 ( h10 p4 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,p4b,h1b,h2b,h10b,p3b_1,h10b_1,p4b_2,h10b_2,h1b_2,h2b_2
      INTEGER dim_common, dima_sort, dimb_sort, dima, dimb, dimc
      INTEGER k_a,k_bs,l_bs,k_b,l_b,k_cs,l_cs,k_c,l_c
#ifdef LOCAL_COPY
      INTEGER l_a
#else
      INTEGER offset_a
#endif
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO p4b = noab+1,noab+nvab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+p4b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq.
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq.
     2           ieor(irrep_v,irrep_t)) THEN
            IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs))
     1             CALL ERRQUIT('ccsd_t2_2',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO h10b = 1,noab
               IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h10b-1)) THEN
                IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h10b-1))
     1              .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_2(p3b,h10b,p3b_1,h10b_1)
                 CALL TCE_RESTRICTED_4(p4b,h10b,h1b,h2b,
     1                                 p4b_2,h10b_2,h1b_2,h2b_2)
                 dim_common = int_mb(k_range+h10b-1)
                 dima_sort = int_mb(k_range+p3b-1)
                 dima = dim_common * dima_sort
                 dimb_sort = int_mb(k_range+p4b-1)
     1                     * int_mb(k_range+h1b-1)
     2                     * int_mb(k_range+h2b-1)
                 dimb = dim_common * dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
#ifdef LOCAL_COPY
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a))
     1                 CALL ERRQUIT('ccsd_t2_2',2,MA_ERR)
                  CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     1                 int_mb(k_a_offset),
     2                 (h10b_1 - 1 + noab * (p3b_1 - noab - 1)))
#else
                  call tce_hash(int_mb(k_a_offset),
     1                          (h10b_1-1 + noab * (p3b_1-noab-1)),
     2                          offset_a)
                  k_a = d_a + offset_a
#endif
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs))
     1                 CALL ERRQUIT('ccsd_t2_2',4,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b))
     1                 CALL ERRQUIT('ccsd_t2_2',5,MA_ERR)
                  CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                 int_mb(k_b_offset),(h2b_2 - 1 + noab *
     2                 (h1b_2 - 1 + noab * (h10b_2 - 1 + noab *
     3                 (p4b_2 - noab - 1)))))
                  CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                 int_mb(k_range+p4b-1),int_mb(k_range+h10b-1),
     2                 int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                 4,3,1,2,1.0d0)
                  IF (.not.MA_POP_STACK(l_b))
     1                 CALL ERRQUIT('ccsd_t2_2',6,MA_ERR)
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1                 1.0d0,dbl_mb(k_a),dim_common,dbl_mb(k_bs),
     2                 dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
                  IF (.not.MA_POP_STACK(l_bs))
     1                 CALL ERRQUIT('ccsd_t2_2',7,MA_ERR)
#ifdef LOCAL_COPY
                  IF (.not.MA_POP_STACK(l_a))
     1                 CALL ERRQUIT('ccsd_t2_2',8,MA_ERR)
#endif
                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c))
     1             CALL ERRQUIT('ccsd_t2_2',9,MA_ERR)
              IF ((p3b .le. p4b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2              int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),
     3              4,3,2,1,-1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab *
     2              (h1b - 1 + noab * (p4b - noab - 1 + nvab *
     3              (p3b - noab - 1)))))
              END IF
              IF ((p4b .le. p3b)) THEN
               CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1              int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2              int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),
     3              3,4,2,1,1.0d0)
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1              int_mb(k_c_offset),(h2b - 1 + noab *
     2              (h1b - 1 + noab * (p3b - noab - 1 + nvab *
     3              (p4b - noab - 1)))))
              END IF
              IF (.not.MA_POP_STACK(l_c))
     1             CALL ERRQUIT('ccsd_t2_2',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs))
     1             CALL ERRQUIT('ccsd_t2_2',11,MA_ERR)
          next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_v + = 1 * v ( h10 p3 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,h2b,p3b_1,h10b_1,h1b_1,h2b_1
      INTEGER dimc
      INTEGER k_as, l_as, k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq.
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1)
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(p3b,h10b,h1b,h2b,
     1                              p3b_1,h10b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as))
     1              CALL ERRQUIT('ccsd_t2_2_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a))
     1              CALL ERRQUIT('ccsd_t2_2_1',1,MA_ERR)
               IF ((h10b .le. p3b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 +
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 +
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                h2b_1,h1b_1,p3b_1,h10b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3               2,1,3,4,1.0d0)
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_as),dimc,
     1              int_mb(k_c_offset),
     2              (h2b - 1 + noab * (h1b - 1 + noab *
     3              (h10b - 1 + noab * (p3b - noab - 1)))))
               IF (.not.MA_POP_STACK(l_a))
     1              CALL ERRQUIT('ccsd_t2_2_1',4,MA_ERR)
               IF (.not.MA_POP_STACK(l_as))
     1              CALL ERRQUIT('ccsd_t2_2_1',5,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END








      SUBROUTINE ccsd_t2_2_2(d_a,k_a_offset,d_b,k_b_offset,
     1                       d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( h11 ) * t ( p3 h11 )_t * i2 ( h10 h11 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_b, d_c
      INTEGER k_a_offset, k_b_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,h2b,h11b,p3b_1,h11b_1
      INTEGER h10b_2,h11b_2,h1b_2,h2b_2
      INTEGER dim_common,dima_sort,dima,dimb_sort,dimb,dimc
      INTEGER k_a,k_bs,l_bs,k_b,l_b,k_cs,l_cs,k_c,l_c
#ifdef LOCAL_COPY
      INTEGER l_a
#else
      INTEGER offset_a
#endif
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq.
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq.
     2           ieor(irrep_v,irrep_t)) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1)
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs))
     1             CALL ERRQUIT('ccsd_t2_2_2',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO h11b = 1,noab
               IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h11b-1)) THEN
                IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h11b-1))
     1              .eq. irrep_t) THEN
                 CALL TCE_RESTRICTED_2(p3b,h11b,p3b_1,h11b_1)
                 CALL TCE_RESTRICTED_4(h10b,h11b,h1b,h2b,
     1                                 h10b_2,h11b_2,h1b_2,h2b_2)
                 dim_common = int_mb(k_range+h11b-1)
                 dima_sort = int_mb(k_range+p3b-1)
                 dima = dim_common * dima_sort
                 dimb_sort = int_mb(k_range+h10b-1)
     1                     * int_mb(k_range+h1b-1)
     2                     * int_mb(k_range+h2b-1)
                 dimb = dim_common * dimb_sort
                 IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
#ifdef LOCAL_COPY
                  IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a))
     1                 CALL ERRQUIT('ccsd_t2_2_2',2,MA_ERR)
                  CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     1                 int_mb(k_a_offset),
     2                 (h11b_1-1 + noab * (p3b_1-noab-1)))
#else
                  call tce_hash(int_mb(k_a_offset),
     1                          (h11b_1-1 + noab * (p3b_1-noab-1)),
     2                          offset_a)
                  k_a = d_a + offset_a
#endif
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs))
     1                 CALL ERRQUIT('ccsd_t2_2_2',4,MA_ERR)
                  IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b))
     1                 CALL ERRQUIT('ccsd_t2_2_2',5,MA_ERR)
                  IF ((h11b .lt. h10b)) THEN
                   CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                  int_mb(k_b_offset),(h2b_2 - 1 + noab *
     2                  (h1b_2 - 1 + noab * (h10b_2 - 1 + noab *
     3                  (h11b_2 - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                  int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,2,1,-1.0d0)
                  END IF
                  IF ((h10b .le. h11b)) THEN
                   CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,
     1                  int_mb(k_b_offset),(h2b_2 - 1 + noab *
     2                  (h1b_2 - 1 + noab * (h11b_2 - 1 + noab *
     3                  (h10b_2 - 1)))))
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     1                  int_mb(k_range+h10b-1),int_mb(k_range+h11b-1),
     2                  int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     3                  4,3,1,2,1.0d0)
                  END IF
                  IF (.not.MA_POP_STACK(l_b))
     1                 CALL ERRQUIT('ccsd_t2_2_2',6,MA_ERR)
                  CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     1                 1.0d0,dbl_mb(k_a),dim_common,dbl_mb(k_bs),
     2                 dim_common,1.0d0,dbl_mb(k_cs),dima_sort)
                  IF (.not.MA_POP_STACK(l_bs))
     1                 CALL ERRQUIT('ccsd_t2_2_2',7,MA_ERR)
#ifdef LOCAL_COPY
                  IF (.not.MA_POP_STACK(l_a))
     1                 CALL ERRQUIT('ccsd_t2_2_2',8,MA_ERR)
#endif
                 END IF
                END IF
               END IF
              END DO
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c))
     1             CALL ERRQUIT('ccsd_t2_2_2',9,MA_ERR)
              CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     1             int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     2             int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     3             4,3,2,1,1.0d0/2.0d0)
              CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1             int_mb(k_c_offset),(h2b - 1 + noab *
     2             (h1b - 1 + noab * (h10b - 1 + noab *
     3             (p3b - noab - 1)))))
              IF (.not.MA_POP_STACK(l_c))
     1             CALL ERRQUIT('ccsd_t2_2_2',10,MA_ERR)
              IF (.not.MA_POP_STACK(l_cs))
     1             CALL ERRQUIT('ccsd_t2_2_2',11,MA_ERR)
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_v + = -1 * v ( h10 h11 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b,h11b,h1b,h2b,h10b_1,h11b_1,h1b_1,h2b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
           IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+h2b-1).ne.8)) THEN
            IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq.
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
             IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              CALL TCE_RESTRICTED_4(h10b,h11b,h1b,h2b,
     1                              h10b_1,h11b_1,h1b_1,h2b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a))
     1              CALL ERRQUIT('ccsd_t2_2_2_1',1,MA_ERR)
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 +
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(h2b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 +
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                h2b_1,h1b_1,h11b_1,h10b_1)
                end if
                CALL DSCAL(dimc,-1.0d0,dbl_mb(k_a),1)
                CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1               int_mb(k_c_offset),(h2b - 1 + noab *
     2               (h1b - 1 + noab * (h11b - 1 + noab *
     3               (h10b - 1)))))
                IF (.not.MA_POP_STACK(l_a))
     1               CALL ERRQUIT('ccsd_t2_2_2_1',4,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END









      SUBROUTINE ccsd_t2_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i3 ( h10 h11 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t))
     &THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,h2b,p5b,h10b_2,h11b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_2_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_2_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (h10
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-
     &1),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_2_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_2_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_2_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_2_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_2_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_2_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p5 )_v + = 1 * v ( h10 h11 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b,h11b,h1b,p5b,h10b_1,h11b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO p5b = noab+1,noab+nvab
           IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1          +int_mb(k_spin+h11b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p5b-1).ne.8)) THEN
            IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq.
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
             IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1))))
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(h10b,h11b,h1b,p5b,
     1                              h10b_1,h11b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a))
     1              CALL ERRQUIT('ccsd_t2_2_2_2_1',1,MA_ERR)
               IF ((h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 +
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 +
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                p5b_1,h1b_1,h11b_1,h10b_1)
                end if
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(p5b - noab - 1 + nvab *
     2              (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))
               IF (.not.MA_POP_STACK(l_a))
     1              CALL ERRQUIT('ccsd_t2_2_2_2_1',4,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END







      SUBROUTINE ccsd_t2_2_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h11 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 h11 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t))
     &THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,p5b,p6b,h10b_2,h11b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_2_2_2',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_2_2_2',5,MA_ERR)
      IF ((p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,h11b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-
     &1),4,2,1,3,-1.0d0)
      END IF
      IF ((p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,h11b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-
     &1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_2_2_2',6,MA_ER
     &R)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_2_2_2',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_2_2_2',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_2_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_2_2_2',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_2_2_2',11
     &,MA_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 h2 )_vt + = -1/2 * Sum ( p7 p8 ) * t ( p7 p8 h1 h2 )_t * v ( h10 h11 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p7b
      INTEGER p8b
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO h11b = h10b,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
           IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq.
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
            IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
     &             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs))
     &          CALL ERRQUIT('ccsd_t2_2_2_3',0,MA_ERR)
              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              DO p7b = noab+1,noab+nvab
               DO p8b = p7b,noab+nvab
                IF (int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1) .eq.
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
                 IF (ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     &                      .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p7b,p8b,h1b,h2b,
     &                                  p7b_1,p8b_1,h1b_1,h2b_1)
                  CALL TCE_RESTRICTED_4(h10b,h11b,p7b,p8b,
     &                                  h10b_2,h11b_2,p7b_2,p8b_2)
                  dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1)
                  dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
                  dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
                  dima = dim_common * dima_sort
                  dimb = dim_common * dimb_sort
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
                   !IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL ERRQUIT('ccsd_t2_2_2_3',1,MA_ERR)
                   !IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('ccsd_t2_2_2_3',2,MA_ERR)
                   CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),
     &                                 (h2b_1-1+noab*(h1b_1-1+noab*
     &                                 (p8b_1-noab-1+nvab*(p7b_1-noab-1)))))
                   CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     &                             int_mb(k_range+p7b-1),int_mb(k_range+p8b-1),
     &                             int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     &                             4,3,2,1,1.0d0)
                   !IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_2_3',3,MA_ERR)
                   !IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL ERRQUIT('ccsd_t2_2_2_3',4,MA_ERR)
                   !IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('ccsd_t2_2_2_3',5,MA_ERR)
                   if(.not.intorb) then
                    CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &                                 (p8b_2-1+(noab+nvab)*(p7b_2-1+(noab+nvab)
     &                                 *(h11b_2-1+(noab+nvab)*(h10b_2-1)))))
                   else
                    CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,
     &                                   int_mb(k_b_offset),
     &                                   (p8b_2-1+(noab+nvab)*(p7b_2-1
     &                                   +(noab+nvab)*(h11b_2-1+(noab+nvab)*
     &                                   (h10b_2-1)))),
     &                                   p8b_2,p7b_2,h11b_2,h10b_2)
                   end if
                   CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),
     &                            int_mb(k_range+h10b-1),int_mb(k_range+h11b-1),
     &                            int_mb(k_range+p7b-1),int_mb(k_range+p8b-1),
     &                            2,1,4,3,1.0d0)
                   !IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_2_3',6,MA_ERR)
                   nsuperp(1) = 1
                   nsuperp(2) = 1
                   isuperp = 1
                   IF (p7b .eq. p8b) THEN
                    nsuperp(isuperp) = nsuperp(isuperp) + 1
                   ELSE
                    isuperp = isuperp + 1
                   END IF
                   CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,
     &                        2.0d0/FACTORIAL(nsuperp(1))/FACTORIAL(nsuperp(2)),
     &                        dbl_mb(k_as),dim_common,dbl_mb(k_bs),dim_common,
     &                        1.0d0,dbl_mb(k_cs),dima_sort)
                   !IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_2_3',7,MA_ERR)
                   !IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_2_3',8,MA_ERR)
                  END IF
                 END IF
                END IF
               END DO
              END DO
              !IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('ccsd_t2_2_2_3',9,MA_ERR)
              CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),
     &                        int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),
     &                        int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     &                        2,1,4,3,-1.0d0/2.0d0)
              CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),
     &                            (h2b-1+noab*(h1b-1+noab*(h11b-1+noab*
     &                            (h10b-1)))))
              !IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_2_3',10,MA_ERR)
              !IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_2_3',11,MA_ERR)
              next = NXTASK(nprocs, 1)
             END IF
             count = count + 1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END

      SUBROUTINE ccsd_t2_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i2 ( h10 p3 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h10b,h2b,p5b,p3b_2,h10b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_3',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (p3b
     &_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-1
     &),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_3',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_3',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_3',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_3',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_3',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_3',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p3 h1 p5 )_v + = 1 * v ( h10 p3 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER p3b,h10b,h1b,p5b,p3b_1,h10b_1,h1b_1,p5b_1
      INTEGER dimc
      INTEGER k_as, l_as, k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO p5b = noab+1,noab+nvab
           IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p5b-1).ne.8)) THEN
            IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq.
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
             IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1))))
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1)
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
              CALL TCE_RESTRICTED_4(p3b,h10b,h1b,p5b,
     1                              p3b_1,h10b_1,h1b_1,p5b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'as',l_as,k_as))
     1              CALL ERRQUIT('ccsd_t2_2_3_1',0,MA_ERR)
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a))
     1              CALL ERRQUIT('ccsd_t2_2_3_1',1,MA_ERR)
               IF ((h10b .le. p3b) .and. (h1b .le. p5b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 +
     3                (noab+nvab) * (h10b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p5b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (p3b_1 - 1 +
     3                (noab+nvab) * (h10b_1 - 1)))),
     4                p5b_1,h1b_1,p3b_1,h10b_1)
                end if
                CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),
     1               int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     2               int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),
     3               2,1,3,4,1.0d0)
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),
     2              (p5b - noab - 1 + nvab * (h1b - 1 + noab *
     3              (h10b - 1 + noab * (p3b - noab - 1)))))
               IF (.not.MA_POP_STACK(l_a))
     1              CALL ERRQUIT('ccsd_t2_2_3_1',4,MA_ERR)
               IF (.not.MA_POP_STACK(l_as))
     1              CALL ERRQUIT('ccsd_t2_2_3_1',5,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p3 h1 p5 )_vt + = -1/2 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h10 p3 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_3_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,h10b,p5b,p6b,p3b_2,h10b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_3_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_3_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_3_2',5,MA_ERR)
      IF ((h10b .le. p3b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,p3b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,1,2,3,-1.0d0)
      END IF
      IF ((h10b .le. p3b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,p3b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_3_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_3_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_3_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_3_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_3_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_3_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_ft + = -1 * Sum ( p5 ) * t ( p3 p5 h1 h2 )_t * i2 ( h10 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_f,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h2b,p3b_1,p5b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_2(h10b,p5b,h10b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_4',2,MA_ERR)
      IF ((p5b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,-1.0d0)
      END IF
      IF ((p3b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_4',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h10b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+p5b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_4',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_4',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_4',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_4',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,1,3,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_4',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_4',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 )_f + = 1 * f ( h10 p5 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h10b, p5b, h10b_1, p5b_1
      INTEGER dim_common, dima_sort, dima, dimc
      INTEGER k_as, l_as, k_a, l_a, k_c, l_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
       DO p5b = noab+1,noab+nvab
         IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)
     1                            +int_mb(k_spin+p5b-1).ne.4)) THEN
          IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
           IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1))
     1         .eq. irrep_f) THEN
        IF (next.eq.count) THEN
            dimc = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
            CALL TCE_RESTRICTED_2(h10b,p5b,h10b_1,p5b_1)
            dim_common = 1
            dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
            dima = dim_common * dima_sort
            IF (dima .gt. 0) THEN
             IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as))
     1            CALL ERRQUIT('ccsd_t2_2_4_1',0,MA_ERR)
             IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a))
     1            CALL ERRQUIT('ccsd_t2_2_4_1',1,MA_ERR)
             CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,
     1            int_mb(k_a_offset),
     2            (p5b_1 - 1 + (noab+nvab) * (h10b_1 - 1)))
             CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),
     1            int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),
     2            2,1,1.0d0)
             IF (.not.MA_POP_STACK(l_a))
     1            CALL ERRQUIT('ccsd_t2_2_4_1',2,MA_ERR)
             IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c))
     1            CALL ERRQUIT('ccsd_t2_2_4_1',3,MA_ERR)
             CALL TCE_SORT_2(dbl_mb(k_as),dbl_mb(k_c),
     1            int_mb(k_range+p5b-1),int_mb(k_range+h10b-1),
     2            2,1,1.0d0)
             CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,
     1            int_mb(k_c_offset),
     2            (p5b - noab - 1 + nvab * (h10b - 1)))
             IF (.not.MA_POP_STACK(l_c))
     1            CALL ERRQUIT('ccsd_t2_2_4_1',4,MA_ERR)
             IF (.not.MA_POP_STACK(l_as))
     1            CALL ERRQUIT('ccsd_t2_2_4_1',5,MA_ERR)
            END IF
        next = NXTASK(nprocs, 1)
        END IF
        count = count + 1
           END IF
          END IF
         END IF
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 )_vt + = -1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h10 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h10b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p5b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_4_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h10b,h7b,p5b,p6b,h10b_2,h7b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_4_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_4_2',5,MA_ERR)
      IF ((h7b .le. h10b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p5b_2,p6b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((h7b .le. h10b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p6b_2,p5b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF ((h10b .lt. h7b) .and. (p6b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p5b_2,p6b_2,h7b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,1,2,3,1.0d0)
      END IF
      IF ((h10b .lt. h7b) .and. (p5b .le. p6b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))),p6b_2,p5b_2,h7b_2,h10b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_4_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_4_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_4_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_4_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h10b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_4_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_4_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsd_t2_2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_offse
     &t)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h7 p9 ) * t ( p3 p9 h1 h7 )_t * i2 ( h7 h10 h2 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p9b
      INTEGER h7b
      INTEGER p3b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER h10b_2
      INTEGER h7b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO p3b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_5',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p9b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p9b,h1b,h7b,p3b_1,p9b_1,h1b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h10b,h7b,h2b,p9b,h10b_2,h7b_2,h2b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_5',2,MA_ERR)
      IF ((p9b .lt. p3b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p9b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1)
     &,4,2,3,1,1.0d0)
      END IF
      IF ((p9b .lt. p3b) .and. (h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p9b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h7b-1)
     &,3,2,4,1,-1.0d0)
      END IF
      IF ((p3b .le. p9b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1)
     &,4,1,3,2,-1.0d0)
      END IF
      IF ((p3b .le. p9b) .and. (h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h7b-1)
     &,3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_5',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_5',5,MA_ERR)
      IF ((h7b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (h7b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF ((h10b .lt. h7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h7b_2 - 1 + noab * (h10b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+h2b-1),int_mb(k_range+p9b-1
     &),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_5',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_5',7,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_5',8,MA_E
     &RR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_5',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,2,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1
     &),4,2,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h10b - 1 + noab * (p3b - noab - 1))
     &)))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_5',10,MA_ERR)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_5',11,MA_
     &ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h10 h1 p9 )_v + = 1 * v ( h7 h10 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a, d_c
      INTEGER k_a_offset, k_c_offset
      INTEGER NXTASK, next, nprocs, count
      INTEGER h7b,h10b,h1b,p9b,h7b_1,h10b_1,h1b_1,p9b_1
      INTEGER dimc
      INTEGER k_a, l_a
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h7b = 1,noab
       DO h10b = h7b,noab
        DO h1b = 1,noab
         DO p9b = noab+1,noab+nvab
           IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)
     1          +int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)
     2          +int_mb(k_spin+p9b-1).ne.8)) THEN
            IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq.
     1          int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1)) THEN
             IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),
     1           ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p9b-1))))
     2           .eq. irrep_v) THEN
          IF (next.eq.count) THEN
              dimc = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1)
     1             * int_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
              CALL TCE_RESTRICTED_4(h7b,h10b,h1b,p9b,
     1                              h7b_1,h10b_1,h1b_1,p9b_1)
              IF (dimc .gt. 0) THEN
               IF (.not.MA_PUSH_GET(mt_dbl,dimc,'a',l_a,k_a))
     1              CALL ERRQUIT('ccsd_t2_2_5_1',1,MA_ERR)
               IF ((h1b .le. p9b)) THEN
                if(.not.intorb) then
                 CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p9b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (h10b_1 - 1 +
     3                (noab+nvab) * (h7b_1 - 1)))))
                else
                 CALL GET_HASH_BLOCK_I(d_a,dbl_mb(k_a),dimc,
     1                int_mb(k_a_offset),(p9b_1 - 1 + (noab+nvab) *
     2                (h1b_1 - 1 + (noab+nvab) * (h10b_1 - 1 +
     3                (noab+nvab) * (h7b_1 - 1)))),
     4                p9b_1,h1b_1,h10b_1,h7b_1)
                end if
               END IF
               CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_a),dimc,
     1              int_mb(k_c_offset),(p9b - noab - 1 + nvab *
     2              (h1b - 1 + noab * (h10b - 1 + noab * (h7b - 1)))))
               IF (.not.MA_POP_STACK(l_a))
     1              CALL ERRQUIT('ccsd_t2_2_5_1',4,MA_ERR)
              END IF
           next = NXTASK(nprocs, 1)
          END IF
          count = count + 1
             END IF
            END IF
           END IF
         END DO
        END DO
       END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END




      SUBROUTINE ccsd_t2_2_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_off
     &set)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h7 h10 h1 p9 )_vt + = 1 * Sum ( p5 ) * t ( p5 h1 )_t * v ( h7 h10 p5 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h10b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_cs
      INTEGER k_cs
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER h10b_2
      INTEGER p9b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_as
      INTEGER k_as
      INTEGER l_a
      INTEGER k_a
      INTEGER l_bs
      INTEGER k_bs
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)
      DO h7b = 1,noab
      DO h10b = h7b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      IF (next.eq.count) THEN
      dimc = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs)) CALL
     & ERRQUIT('ccsd_t2_2_5_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h7b,h10b,p9b,p5b,h7b_2,h10b_2,p9b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as)) CALL
     & ERRQUIT('ccsd_t2_2_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a)) CALL ERRQUIT('
     &ccsd_t2_2_5_2',2,MA_ERR)
      CALL GET_HASH_BLOCK_MA(dbl_mb(d_a),dbl_mb(k_a),dima,
     & int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_as),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsd_t2_2_5_2',3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs)) CALL
     & ERRQUIT('ccsd_t2_2_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b)) CALL ERRQUIT('
     &ccsd_t2_2_5_2',5,MA_ERR)
      IF ((p5b .le. p9b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p9b_2,p5b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1
     &),4,2,1,3,1.0d0)
      END IF
      IF ((p9b .lt. p5b)) THEN
      if(.not.intorb) then
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      else
      CALL GET_HASH_BLOCK_I(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),
     &(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))),p5b_2,p9b_2,h10b_2,h7b_2)
      end if
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_bs),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p9b-1),int_mb(k_range+p5b-1
     &),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsd_t2_2_5_2',6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &s),dim_common,dbl_mb(k_bs),dim_common,1.0d0,dbl_mb(k_cs
     &),dima_sort)
      IF (.not.MA_POP_STACK(l_bs)) CALL ERRQUIT('ccsd_t2_2_5_2',7,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_as)) CALL ERRQUIT('ccsd_t2_2_5_2',8,MA
     &_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c)) CALL ERRQUIT('
     &ccsd_t2_2_5_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_cs),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (h7b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsd_t2_2_5_2',10,MA_ERR
     &)
      IF (.not.MA_POP_STACK(l_cs)) CALL ERRQUIT('ccsd_t2_2_5_2',11,M
     &A_ERR)
      next = NXTASK(nprocs, 1)
      END IF
      count = count + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs, 1)
      call GA_SYNC()
      RETURN
      END
#endif


      SUBROUTINE ccsd_t2_2_6_x(d_a,k_a_offset,d_b,k_b_offset,
     &                         d_c,k_c_offset,maxh,maxp)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p3 h1 h2 )_vt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * v ( h10 p3 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      integer, intent(in) :: d_a, d_b, d_c
      integer, intent(in) :: k_a_offset, k_b_offset, k_c_offset
      integer, intent(in) :: maxh,maxp
      integer :: next, nprocs, count, NXTASK
      integer :: dima, dimb, dimc, dimt
      integer :: dima_sort, dimb_sort, dim_common
      integer :: e_a
#ifdef USE_TCE_CUBLAS
      double precision, allocatable, dimension(:), pinned :: f_t
      double precision, allocatable, dimension(:), device :: f_a, f_b, f_c
#else
      double precision, allocatable, dimension(:) :: f_t
      double precision, allocatable, dimension(:) :: f_a, f_b, f_c
#endif
      integer :: p5b_in,p6b_in
      integer :: p3b, p5b, p6b, h10b, h1b, h2b
      integer :: p5b_1, p6b_1, h1b_1, h2b_1
      integer :: p3b_2, h10b_2, p5b_2, p6b_2
      INTEGER :: nsuperp(2)
      INTEGER :: isuperp
      double precision :: factorial
      external :: nxtask, factorial

      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs, 1)

      dima = maxh*maxh*maxp*maxp ! hhpp
      dimb = maxh*maxp*maxp*maxp ! hppp
      dimc = maxh*maxh*maxh*maxp ! hhhp
      dimt = max(dima,dimb,dimc)

      e_a = 0
      allocate( f_a(1:dima), f_b(1:dimb), f_c(1:dimc),
     &          f_t(1:dimt), stat=e_a)
      if (e_a .gt. 0) then
        CALL ERRQUIT('ccsd_t2_2_6_x',dima+dimb+dimc+dimt,MA_ERR)
      end if

      DO p3b = noab+1,noab+nvab
       DO h10b = 1,noab
        DO h1b = 1,noab
         DO h2b = h1b,noab
          IF ((.not.restricted).or.
     &        ( int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1)
     &         +int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
           IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1) .eq.
     &         int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
            IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+h10b-1),
     &          ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     &                 .eq. ieor(irrep_v,irrep_t)) THEN
             IF (next.eq.count) THEN
              dimc = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1)
     &             * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
!              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'cs',l_cs,k_cs))
!     &          CALL ERRQUIT('ccsd_t2_2_6',0,MA_ERR)
!              CALL DFILL(dimc,0.0d0,dbl_mb(k_cs),1)
              f_c = 0.0d0
              DO p5b_in =ga_nodeid(),ga_nodeid()+nvab-1
               p5b=mod(p5b_in,nvab)+noab+1
               DO p6b_in=ga_nodeid(),ga_nodeid()+nvab+noab-p5b
                p6b=mod(p6b_in,noab+nvab-p5b+1)+p5b
                IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq.
     &              int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
                 IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),
     &               ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1))))
     &                  .eq. irrep_t) THEN
                  CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,
     &                                  p5b_1,p6b_1,h1b_1,h2b_1)
                  CALL TCE_RESTRICTED_4(p3b,h10b,p5b,p6b,
     &                                  p3b_2,h10b_2,p5b_2,p6b_2)
                  dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
                  dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
                  dima = dim_common * dima_sort ! pphh
                  dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1)
                  dimb = dim_common * dimb_sort ! ppph
                  IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
!                   IF (.not.MA_PUSH_GET(mt_dbl,dima,'as',l_as,k_as))
!     &                  CALL ERRQUIT('ccsd_t2_2_6',1,MA_ERR)
!                   IF (.not.MA_PUSH_GET(mt_dbl,dima,'a',l_a,k_a))
!     &                  CALL ERRQUIT('ccsd_t2_2_6',2,MA_ERR)
                   CALL GET_HASH_BLOCK(d_a,f_t,dima,int_mb(k_a_offset),
     &                                 (h2b_1-1+noab*(h1b_1-1+noab*
     &                                 (p6b_1-noab-1+nvab*(p5b_1-noab-1)))))
                   CALL TCE_SORT_4_X(f_t,f_a,
     &                             int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),
     &                             int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),
     &                             4,3,2,1,1.0d0)
!                   IF (.not.MA_POP_STACK(l_a))
!     &                  CALL ERRQUIT('ccsd_t2_2_6',3,MA_ERR)
!                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'bs',l_bs,k_bs))
!     &                  CALL ERRQUIT('ccsd_t2_2_6',4,MA_ERR)
!                   IF (.not.MA_PUSH_GET(mt_dbl,dimb,'b',l_b,k_b))
!     &                  CALL ERRQUIT('ccsd_t2_2_6',5,MA_ERR)
                   IF ((h10b .le. p3b)) THEN
                    if(.not.intorb) then
                     CALL GET_HASH_BLOCK(d_b,f_t,dimb,
     &                                   int_mb(k_b_offset),
     &                                   (p6b_2-1+(noab+nvab)*(p5b_2-1+
     &                                   (noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                                   (h10b_2-1)))))
                    else
                     CALL GET_HASH_BLOCK_I(d_b,f_t,dimb,
     &                                     int_mb(k_b_offset),
     &                                     (p6b_2-1+(noab+nvab)*(p5b_2-1+
     &                                     (noab+nvab)*(p3b_2-1+(noab+nvab)*
     &                                     (h10b_2-1)))),
     &                                     p6b_2,p5b_2,p3b_2,h10b_2)
                    end if
                    CALL TCE_SORT_4_X(f_t,f_b,
     &                           int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     &                           int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),
     &                           1,2,4,3,1.0d0)
                   END IF
!                   IF (.not.MA_POP_STACK(l_b))
!     &                  CALL ERRQUIT('ccsd_t2_2_6',6,MA_ERR)
                   nsuperp(1) = 1
                   nsuperp(2) = 1
                   isuperp = 1
                   IF (p5b .eq. p6b) THEN
                    nsuperp(isuperp) = nsuperp(isuperp) + 1
                   ELSE
                    isuperp = isuperp + 1
                   END IF
                   block
#ifdef USE_TCE_CUBLAS
                     ! the CUBLAS interface only support INT32
                     use iso_fortran_env, only: INT32
                     use cublas, only : DGEMM
                     integer(kind=INT32) :: m,n,k
#else
                     integer :: m,n,k
#endif
                     m = dima_sort
                     n = dimb_sort
                     k = dim_common
                     CALL DGEMM('T','N',m,n,k,
     &                          2.0d0/FACTORIAL(nsuperp(1))/
     &                                FACTORIAL(nsuperp(2)),
     &                          f_a,k,f_b,k,1.0d0,f_c,m)
                   end block
!                   IF (.not.MA_POP_STACK(l_bs))
!     &                  CALL ERRQUIT('ccsd_t2_2_6',7,MA_ERR)
!                   IF (.not.MA_POP_STACK(l_as))
!     &                  CALL ERRQUIT('ccsd_t2_2_6',8,MA_ERR)
                  END IF
                 END IF
                END IF
               END DO
              END DO
!              IF (.not.MA_PUSH_GET(mt_dbl,dimc,'c',l_c,k_c))
!     &              CALL ERRQUIT('ccsd_t2_2_6',9,MA_ERR)
              CALL TCE_SORT_4_X(f_c,f_t,
     &                        int_mb(k_range+h10b-1),int_mb(k_range+p3b-1),
     &                        int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),
     &                        2,1,4,3,0.5d0)
              CALL ADD_HASH_BLOCK(d_c,f_t,dimc,
     &                            int_mb(k_c_offset),
     &                            (h2b-1+noab*(h1b-1+noab*
     &                            (h10b-1+noab*(p3b-noab-1)))))
!              IF (.not.MA_POP_STACK(l_c))
!     &              CALL ERRQUIT('ccsd_t2_2_6',10,MA_ERR)
!              IF (.not.MA_POP_STACK(l_cs))
!     &              CALL ERRQUIT('ccsd_t2_2_6',11,MA_ERR)
              next = NXTASK(nprocs, 1)
             END IF
             count = count + 1
            END IF
           END IF
          END IF
         END DO
        END DO
       END DO
      END DO

      deallocate( f_a, f_b, f_c, f_t, stat=e_a )
      if (e_a .ne. 0) then
        CALL ERRQUIT('ccsd_t2_7_3_x',e_a,MA_ERR)
      end if

      next = NXTASK(-nprocs, 1)
      call GA_SYNC()

      END


